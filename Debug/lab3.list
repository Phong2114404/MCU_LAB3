
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002c64  08002c64  00012c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cb0  08002cb0  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cb0  08002cb0  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cb0  08002cb0  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cb0  08002cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cb4  08002cb4  00012cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08002cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000004c  08002d04  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002d04  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009271  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a31  00000000  00000000  000292e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002ad18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002b708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aee  00000000  00000000  0002c000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1db  00000000  00000000  00042aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082293  00000000  00000000  0004dcc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cff5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f4  00000000  00000000  000cffb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c4c 	.word	0x08002c4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	08002c4c 	.word	0x08002c4c

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2iz>:
 80004d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30f      	bcc.n	80004fa <__aeabi_f2iz+0x2a>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d90d      	bls.n	8000500 <__aeabi_f2iz+0x30>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80004f0:	fa23 f002 	lsr.w	r0, r3, r2
 80004f4:	bf18      	it	ne
 80004f6:	4240      	negne	r0, r0
 80004f8:	4770      	bx	lr
 80004fa:	f04f 0000 	mov.w	r0, #0
 80004fe:	4770      	bx	lr
 8000500:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000504:	d101      	bne.n	800050a <__aeabi_f2iz+0x3a>
 8000506:	0242      	lsls	r2, r0, #9
 8000508:	d105      	bne.n	8000516 <__aeabi_f2iz+0x46>
 800050a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800050e:	bf08      	it	eq
 8000510:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000514:	4770      	bx	lr
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	4770      	bx	lr

0800051c <subkeyprocess>:
int keyreg2[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int keyreg3[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int timerforkeypress = 50;

void subkeyprocess(int id) {
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	button_flag[id] = 1;
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <subkeyprocess+0x1c>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2101      	movs	r1, #1
 800052a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	20000068 	.word	0x20000068

0800053c <isbuttonpressed>:

int isbuttonpressed(int id){
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	if(button_flag[id] == 1){
 8000544:	4a09      	ldr	r2, [pc, #36]	; (800056c <isbuttonpressed+0x30>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d106      	bne.n	800055e <isbuttonpressed+0x22>
		button_flag[id] = 0;
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <isbuttonpressed+0x30>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2100      	movs	r1, #0
 8000556:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800055a:	2301      	movs	r3, #1
 800055c:	e000      	b.n	8000560 <isbuttonpressed+0x24>
	}
	return 0;
 800055e:	2300      	movs	r3, #0
}
 8000560:	4618      	mov	r0, r3
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000068 	.word	0x20000068

08000570 <getkeyinput>:

void getkeyinput(int id, uint16_t button){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	807b      	strh	r3, [r7, #2]
	keyreg0[id] = keyreg1[id];
 800057c:	4a33      	ldr	r2, [pc, #204]	; (800064c <getkeyinput+0xdc>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000584:	4932      	ldr	r1, [pc, #200]	; (8000650 <getkeyinput+0xe0>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyreg1[id] = keyreg2[id];
 800058c:	4a31      	ldr	r2, [pc, #196]	; (8000654 <getkeyinput+0xe4>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000594:	492d      	ldr	r1, [pc, #180]	; (800064c <getkeyinput+0xdc>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyreg2[id] = HAL_GPIO_ReadPin(GPIOA, button);
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	4619      	mov	r1, r3
 80005a0:	482d      	ldr	r0, [pc, #180]	; (8000658 <getkeyinput+0xe8>)
 80005a2:	f001 fb1b 	bl	8001bdc <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4619      	mov	r1, r3
 80005aa:	4a2a      	ldr	r2, [pc, #168]	; (8000654 <getkeyinput+0xe4>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if(keyreg0[id] == keyreg1[id] && keyreg1[id] == keyreg2[id]){
 80005b2:	4a27      	ldr	r2, [pc, #156]	; (8000650 <getkeyinput+0xe0>)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ba:	4924      	ldr	r1, [pc, #144]	; (800064c <getkeyinput+0xdc>)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d13d      	bne.n	8000642 <getkeyinput+0xd2>
 80005c6:	4a21      	ldr	r2, [pc, #132]	; (800064c <getkeyinput+0xdc>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ce:	4921      	ldr	r1, [pc, #132]	; (8000654 <getkeyinput+0xe4>)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d133      	bne.n	8000642 <getkeyinput+0xd2>
		if(keyreg2[id] != keyreg3[id]){
 80005da:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <getkeyinput+0xe4>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005e2:	491e      	ldr	r1, [pc, #120]	; (800065c <getkeyinput+0xec>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d014      	beq.n	8000618 <getkeyinput+0xa8>
			keyreg3[id] = keyreg2[id];
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <getkeyinput+0xe4>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f6:	4919      	ldr	r1, [pc, #100]	; (800065c <getkeyinput+0xec>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if(keyreg2[id] == PRESSED_STATE){
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <getkeyinput+0xe4>)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d11b      	bne.n	8000642 <getkeyinput+0xd2>
				subkeyprocess(id);
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff ff86 	bl	800051c <subkeyprocess>
				timerforkeypress = 50;
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <getkeyinput+0xf0>)
 8000612:	2232      	movs	r2, #50	; 0x32
 8000614:	601a      	str	r2, [r3, #0]

				timerforkeypress = 50;
			}
		}
	}
}
 8000616:	e014      	b.n	8000642 <getkeyinput+0xd2>
			timerforkeypress--;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <getkeyinput+0xf0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	3b01      	subs	r3, #1
 800061e:	4a10      	ldr	r2, [pc, #64]	; (8000660 <getkeyinput+0xf0>)
 8000620:	6013      	str	r3, [r2, #0]
			if(timerforkeypress <= 0){
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <getkeyinput+0xf0>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	dc0b      	bgt.n	8000642 <getkeyinput+0xd2>
				if(keyreg2[id] == PRESSED_STATE){
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <getkeyinput+0xe4>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d102      	bne.n	800063c <getkeyinput+0xcc>
					subkeyprocess(id);
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f7ff ff70 	bl	800051c <subkeyprocess>
				timerforkeypress = 50;
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <getkeyinput+0xf0>)
 800063e:	2232      	movs	r2, #50	; 0x32
 8000640:	601a      	str	r2, [r3, #0]
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000000c 	.word	0x2000000c
 8000650:	20000000 	.word	0x20000000
 8000654:	20000018 	.word	0x20000018
 8000658:	40010800 	.word	0x40010800
 800065c:	20000024 	.word	0x20000024
 8000660:	20000030 	.word	0x20000030

08000664 <fsm_automatic_run>:
 *      Author: Phong
 */

#include "fsm_automatic.h"

void fsm_automatic_run(){
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	switch(status){
 8000668:	4bb4      	ldr	r3, [pc, #720]	; (800093c <fsm_automatic_run+0x2d8>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	2b04      	cmp	r3, #4
 800066e:	f200 822b 	bhi.w	8000ac8 <fsm_automatic_run+0x464>
 8000672:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <fsm_automatic_run+0x14>)
 8000674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000678:	0800068d 	.word	0x0800068d
 800067c:	08000721 	.word	0x08000721
 8000680:	080007ff 	.word	0x080007ff
 8000684:	080008e5 	.word	0x080008e5
 8000688:	080009e5 	.word	0x080009e5
	case INIT:
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2101      	movs	r1, #1
 8000690:	48ab      	ldr	r0, [pc, #684]	; (8000940 <fsm_automatic_run+0x2dc>)
 8000692:	f001 faba 	bl	8001c0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2102      	movs	r1, #2
 800069a:	48a9      	ldr	r0, [pc, #676]	; (8000940 <fsm_automatic_run+0x2dc>)
 800069c:	f001 fab5 	bl	8001c0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2104      	movs	r1, #4
 80006a4:	48a6      	ldr	r0, [pc, #664]	; (8000940 <fsm_automatic_run+0x2dc>)
 80006a6:	f001 fab0 	bl	8001c0a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2108      	movs	r1, #8
 80006ae:	48a4      	ldr	r0, [pc, #656]	; (8000940 <fsm_automatic_run+0x2dc>)
 80006b0:	f001 faab 	bl	8001c0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2110      	movs	r1, #16
 80006b8:	48a1      	ldr	r0, [pc, #644]	; (8000940 <fsm_automatic_run+0x2dc>)
 80006ba:	f001 faa6 	bl	8001c0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2120      	movs	r1, #32
 80006c2:	489f      	ldr	r0, [pc, #636]	; (8000940 <fsm_automatic_run+0x2dc>)
 80006c4:	f001 faa1 	bl	8001c0a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2110      	movs	r1, #16
 80006cc:	489d      	ldr	r0, [pc, #628]	; (8000944 <fsm_automatic_run+0x2e0>)
 80006ce:	f001 fa9c 	bl	8001c0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2120      	movs	r1, #32
 80006d6:	489b      	ldr	r0, [pc, #620]	; (8000944 <fsm_automatic_run+0x2e0>)
 80006d8:	f001 fa97 	bl	8001c0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2140      	movs	r1, #64	; 0x40
 80006e0:	4898      	ldr	r0, [pc, #608]	; (8000944 <fsm_automatic_run+0x2e0>)
 80006e2:	f001 fa92 	bl	8001c0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	4896      	ldr	r0, [pc, #600]	; (8000944 <fsm_automatic_run+0x2e0>)
 80006ec:	f001 fa8d 	bl	8001c0a <HAL_GPIO_WritePin>

		status = RED_GREEN;
 80006f0:	4b92      	ldr	r3, [pc, #584]	; (800093c <fsm_automatic_run+0x2d8>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	801a      	strh	r2, [r3, #0]
		setTimer(1, 0);
 80006f6:	2100      	movs	r1, #0
 80006f8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80006fc:	f000 fe7e 	bl	80013fc <setTimer>
		setTimer(led_duration[GREEN_DURA], 1);
 8000700:	4b91      	ldr	r3, [pc, #580]	; (8000948 <fsm_automatic_run+0x2e4>)
 8000702:	789b      	ldrb	r3, [r3, #2]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fe8b 	bl	8000420 <__aeabi_ui2f>
 800070a:	4603      	mov	r3, r0
 800070c:	2101      	movs	r1, #1
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fe74 	bl	80013fc <setTimer>
		setTimer(0.5, 2);
 8000714:	2102      	movs	r1, #2
 8000716:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800071a:	f000 fe6f 	bl	80013fc <setTimer>
		break;
 800071e:	e1dc      	b.n	8000ada <fsm_automatic_run+0x476>

	case RED_GREEN:
		if(timer_flag[1] == 1){
 8000720:	4b8a      	ldr	r3, [pc, #552]	; (800094c <fsm_automatic_run+0x2e8>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d127      	bne.n	8000778 <fsm_automatic_run+0x114>
			led_count2 = led_duration[YELLOW_DURA];
 8000728:	4b87      	ldr	r3, [pc, #540]	; (8000948 <fsm_automatic_run+0x2e4>)
 800072a:	785a      	ldrb	r2, [r3, #1]
 800072c:	4b88      	ldr	r3, [pc, #544]	; (8000950 <fsm_automatic_run+0x2ec>)
 800072e:	701a      	strb	r2, [r3, #0]
			++led_count1;
 8000730:	4b88      	ldr	r3, [pc, #544]	; (8000954 <fsm_automatic_run+0x2f0>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	3301      	adds	r3, #1
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b86      	ldr	r3, [pc, #536]	; (8000954 <fsm_automatic_run+0x2f0>)
 800073a:	701a      	strb	r2, [r3, #0]
			++led_count2;
 800073c:	4b84      	ldr	r3, [pc, #528]	; (8000950 <fsm_automatic_run+0x2ec>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b82      	ldr	r3, [pc, #520]	; (8000950 <fsm_automatic_run+0x2ec>)
 8000746:	701a      	strb	r2, [r3, #0]
			status = RED_AMBER;
 8000748:	4b7c      	ldr	r3, [pc, #496]	; (800093c <fsm_automatic_run+0x2d8>)
 800074a:	2202      	movs	r2, #2
 800074c:	801a      	strh	r2, [r3, #0]

			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2101      	movs	r1, #1
 8000752:	487b      	ldr	r0, [pc, #492]	; (8000940 <fsm_automatic_run+0x2dc>)
 8000754:	f001 fa59 	bl	8001c0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2110      	movs	r1, #16
 800075c:	4878      	ldr	r0, [pc, #480]	; (8000940 <fsm_automatic_run+0x2dc>)
 800075e:	f001 fa54 	bl	8001c0a <HAL_GPIO_WritePin>

			setTimer(led_duration[YELLOW_DURA], 1);
 8000762:	4b79      	ldr	r3, [pc, #484]	; (8000948 <fsm_automatic_run+0x2e4>)
 8000764:	785b      	ldrb	r3, [r3, #1]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fe5a 	bl	8000420 <__aeabi_ui2f>
 800076c:	4603      	mov	r3, r0
 800076e:	2101      	movs	r1, #1
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fe43 	bl	80013fc <setTimer>
 8000776:	e025      	b.n	80007c4 <fsm_automatic_run+0x160>
		}
		else{
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2101      	movs	r1, #1
 800077c:	4870      	ldr	r0, [pc, #448]	; (8000940 <fsm_automatic_run+0x2dc>)
 800077e:	f001 fa44 	bl	8001c0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2110      	movs	r1, #16
 8000786:	486e      	ldr	r0, [pc, #440]	; (8000940 <fsm_automatic_run+0x2dc>)
 8000788:	f001 fa3f 	bl	8001c0a <HAL_GPIO_WritePin>
			if(timer_flag[2]){
 800078c:	4b6f      	ldr	r3, [pc, #444]	; (800094c <fsm_automatic_run+0x2e8>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d017      	beq.n	80007c4 <fsm_automatic_run+0x160>
				scan7SEG(mode, segth++);
 8000794:	4b70      	ldr	r3, [pc, #448]	; (8000958 <fsm_automatic_run+0x2f4>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	4b70      	ldr	r3, [pc, #448]	; (800095c <fsm_automatic_run+0x2f8>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	b2d1      	uxtb	r1, r2
 80007a2:	4a6e      	ldr	r2, [pc, #440]	; (800095c <fsm_automatic_run+0x2f8>)
 80007a4:	7011      	strb	r1, [r2, #0]
 80007a6:	4619      	mov	r1, r3
 80007a8:	f000 fbc6 	bl	8000f38 <scan7SEG>
				segth %= 4;
 80007ac:	4b6b      	ldr	r3, [pc, #428]	; (800095c <fsm_automatic_run+0x2f8>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	f003 0303 	and.w	r3, r3, #3
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b69      	ldr	r3, [pc, #420]	; (800095c <fsm_automatic_run+0x2f8>)
 80007b8:	701a      	strb	r2, [r3, #0]
				setTimer(0.5, 2);
 80007ba:	2102      	movs	r1, #2
 80007bc:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80007c0:	f000 fe1c 	bl	80013fc <setTimer>

			}
		}
		if(isbuttonpressed(0)){
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff feb9 	bl	800053c <isbuttonpressed>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	f000 817d 	beq.w	8000acc <fsm_automatic_run+0x468>
			status = MAN_RED;
 80007d2:	4b5a      	ldr	r3, [pc, #360]	; (800093c <fsm_automatic_run+0x2d8>)
 80007d4:	220c      	movs	r2, #12
 80007d6:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2101      	movs	r1, #1
 80007dc:	4858      	ldr	r0, [pc, #352]	; (8000940 <fsm_automatic_run+0x2dc>)
 80007de:	f001 fa14 	bl	8001c0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2110      	movs	r1, #16
 80007e6:	4856      	ldr	r0, [pc, #344]	; (8000940 <fsm_automatic_run+0x2dc>)
 80007e8:	f001 fa0f 	bl	8001c0a <HAL_GPIO_WritePin>
			mode = 1;
 80007ec:	4b5a      	ldr	r3, [pc, #360]	; (8000958 <fsm_automatic_run+0x2f4>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	701a      	strb	r2, [r3, #0]
			setTimer(0.5, 0);
 80007f2:	2100      	movs	r1, #0
 80007f4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80007f8:	f000 fe00 	bl	80013fc <setTimer>
		}
		break;
 80007fc:	e166      	b.n	8000acc <fsm_automatic_run+0x468>

	case RED_AMBER:

		if(timer_flag[1] == 1){
 80007fe:	4b53      	ldr	r3, [pc, #332]	; (800094c <fsm_automatic_run+0x2e8>)
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d12b      	bne.n	800085e <fsm_automatic_run+0x1fa>
			led_count1 = led_duration[GREEN_DURA];
 8000806:	4b50      	ldr	r3, [pc, #320]	; (8000948 <fsm_automatic_run+0x2e4>)
 8000808:	789a      	ldrb	r2, [r3, #2]
 800080a:	4b52      	ldr	r3, [pc, #328]	; (8000954 <fsm_automatic_run+0x2f0>)
 800080c:	701a      	strb	r2, [r3, #0]
			led_count2 = led_duration[RED_DURA];
 800080e:	4b4e      	ldr	r3, [pc, #312]	; (8000948 <fsm_automatic_run+0x2e4>)
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	4b4f      	ldr	r3, [pc, #316]	; (8000950 <fsm_automatic_run+0x2ec>)
 8000814:	701a      	strb	r2, [r3, #0]
			++led_count1;
 8000816:	4b4f      	ldr	r3, [pc, #316]	; (8000954 <fsm_automatic_run+0x2f0>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b4d      	ldr	r3, [pc, #308]	; (8000954 <fsm_automatic_run+0x2f0>)
 8000820:	701a      	strb	r2, [r3, #0]
			++led_count2;
 8000822:	4b4b      	ldr	r3, [pc, #300]	; (8000950 <fsm_automatic_run+0x2ec>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	3301      	adds	r3, #1
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b49      	ldr	r3, [pc, #292]	; (8000950 <fsm_automatic_run+0x2ec>)
 800082c:	701a      	strb	r2, [r3, #0]
			status = GREEN_RED;
 800082e:	4b43      	ldr	r3, [pc, #268]	; (800093c <fsm_automatic_run+0x2d8>)
 8000830:	2203      	movs	r2, #3
 8000832:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4841      	ldr	r0, [pc, #260]	; (8000940 <fsm_automatic_run+0x2dc>)
 800083a:	f001 f9e6 	bl	8001c0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	2120      	movs	r1, #32
 8000842:	483f      	ldr	r0, [pc, #252]	; (8000940 <fsm_automatic_run+0x2dc>)
 8000844:	f001 f9e1 	bl	8001c0a <HAL_GPIO_WritePin>
			setTimer(led_duration[GREEN_DURA], 1);
 8000848:	4b3f      	ldr	r3, [pc, #252]	; (8000948 <fsm_automatic_run+0x2e4>)
 800084a:	789b      	ldrb	r3, [r3, #2]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fde7 	bl	8000420 <__aeabi_ui2f>
 8000852:	4603      	mov	r3, r0
 8000854:	2101      	movs	r1, #1
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fdd0 	bl	80013fc <setTimer>
 800085c:	e025      	b.n	80008aa <fsm_automatic_run+0x246>
		}
		else{
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2101      	movs	r1, #1
 8000862:	4837      	ldr	r0, [pc, #220]	; (8000940 <fsm_automatic_run+0x2dc>)
 8000864:	f001 f9d1 	bl	8001c0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2120      	movs	r1, #32
 800086c:	4834      	ldr	r0, [pc, #208]	; (8000940 <fsm_automatic_run+0x2dc>)
 800086e:	f001 f9cc 	bl	8001c0a <HAL_GPIO_WritePin>

			if(timer_flag[2]) {
 8000872:	4b36      	ldr	r3, [pc, #216]	; (800094c <fsm_automatic_run+0x2e8>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d017      	beq.n	80008aa <fsm_automatic_run+0x246>
				scan7SEG(mode, segth++);
 800087a:	4b37      	ldr	r3, [pc, #220]	; (8000958 <fsm_automatic_run+0x2f4>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	4b36      	ldr	r3, [pc, #216]	; (800095c <fsm_automatic_run+0x2f8>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	1c5a      	adds	r2, r3, #1
 8000886:	b2d1      	uxtb	r1, r2
 8000888:	4a34      	ldr	r2, [pc, #208]	; (800095c <fsm_automatic_run+0x2f8>)
 800088a:	7011      	strb	r1, [r2, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	f000 fb53 	bl	8000f38 <scan7SEG>
				segth %= 4;
 8000892:	4b32      	ldr	r3, [pc, #200]	; (800095c <fsm_automatic_run+0x2f8>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	f003 0303 	and.w	r3, r3, #3
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b2f      	ldr	r3, [pc, #188]	; (800095c <fsm_automatic_run+0x2f8>)
 800089e:	701a      	strb	r2, [r3, #0]
				setTimer(0.5, 2);
 80008a0:	2102      	movs	r1, #2
 80008a2:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80008a6:	f000 fda9 	bl	80013fc <setTimer>
			}
		}
		if(isbuttonpressed(0)){
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff fe46 	bl	800053c <isbuttonpressed>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 810c 	beq.w	8000ad0 <fsm_automatic_run+0x46c>
			status = MAN_RED;
 80008b8:	4b20      	ldr	r3, [pc, #128]	; (800093c <fsm_automatic_run+0x2d8>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	2101      	movs	r1, #1
 80008c2:	481f      	ldr	r0, [pc, #124]	; (8000940 <fsm_automatic_run+0x2dc>)
 80008c4:	f001 f9a1 	bl	8001c0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2120      	movs	r1, #32
 80008cc:	481c      	ldr	r0, [pc, #112]	; (8000940 <fsm_automatic_run+0x2dc>)
 80008ce:	f001 f99c 	bl	8001c0a <HAL_GPIO_WritePin>
			mode = 1;
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <fsm_automatic_run+0x2f4>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
			setTimer(0.5, 0);
 80008d8:	2100      	movs	r1, #0
 80008da:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80008de:	f000 fd8d 	bl	80013fc <setTimer>
		}
		break;
 80008e2:	e0f5      	b.n	8000ad0 <fsm_automatic_run+0x46c>

	case GREEN_RED:
		if(timer_flag[1]){
 80008e4:	4b19      	ldr	r3, [pc, #100]	; (800094c <fsm_automatic_run+0x2e8>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d039      	beq.n	8000960 <fsm_automatic_run+0x2fc>
			led_count1 = led_duration[YELLOW_DURA];
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <fsm_automatic_run+0x2e4>)
 80008ee:	785a      	ldrb	r2, [r3, #1]
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <fsm_automatic_run+0x2f0>)
 80008f2:	701a      	strb	r2, [r3, #0]
			++led_count1;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <fsm_automatic_run+0x2f0>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <fsm_automatic_run+0x2f0>)
 80008fe:	701a      	strb	r2, [r3, #0]
			++led_count2;
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <fsm_automatic_run+0x2ec>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	3301      	adds	r3, #1
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <fsm_automatic_run+0x2ec>)
 800090a:	701a      	strb	r2, [r3, #0]
			status = AMBER_RED;
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <fsm_automatic_run+0x2d8>)
 800090e:	2204      	movs	r2, #4
 8000910:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2102      	movs	r1, #2
 8000916:	480a      	ldr	r0, [pc, #40]	; (8000940 <fsm_automatic_run+0x2dc>)
 8000918:	f001 f977 	bl	8001c0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2108      	movs	r1, #8
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <fsm_automatic_run+0x2dc>)
 8000922:	f001 f972 	bl	8001c0a <HAL_GPIO_WritePin>
			setTimer(led_duration[YELLOW_DURA], 1);
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <fsm_automatic_run+0x2e4>)
 8000928:	785b      	ldrb	r3, [r3, #1]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fd78 	bl	8000420 <__aeabi_ui2f>
 8000930:	4603      	mov	r3, r0
 8000932:	2101      	movs	r1, #1
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fd61 	bl	80013fc <setTimer>
 800093a:	e036      	b.n	80009aa <fsm_automatic_run+0x346>
 800093c:	20000074 	.word	0x20000074
 8000940:	40010c00 	.word	0x40010c00
 8000944:	40010800 	.word	0x40010800
 8000948:	20000038 	.word	0x20000038
 800094c:	20000084 	.word	0x20000084
 8000950:	2000003c 	.word	0x2000003c
 8000954:	2000003b 	.word	0x2000003b
 8000958:	20000076 	.word	0x20000076
 800095c:	20000077 	.word	0x20000077
		}
		else{
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2102      	movs	r1, #2
 8000964:	486e      	ldr	r0, [pc, #440]	; (8000b20 <fsm_automatic_run+0x4bc>)
 8000966:	f001 f950 	bl	8001c0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2108      	movs	r1, #8
 800096e:	486c      	ldr	r0, [pc, #432]	; (8000b20 <fsm_automatic_run+0x4bc>)
 8000970:	f001 f94b 	bl	8001c0a <HAL_GPIO_WritePin>
			if(timer_flag[2]) {
 8000974:	4b6b      	ldr	r3, [pc, #428]	; (8000b24 <fsm_automatic_run+0x4c0>)
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d016      	beq.n	80009aa <fsm_automatic_run+0x346>
				scan7SEG(mode, segth++);
 800097c:	4b6a      	ldr	r3, [pc, #424]	; (8000b28 <fsm_automatic_run+0x4c4>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	4b6a      	ldr	r3, [pc, #424]	; (8000b2c <fsm_automatic_run+0x4c8>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	b2d1      	uxtb	r1, r2
 800098a:	4a68      	ldr	r2, [pc, #416]	; (8000b2c <fsm_automatic_run+0x4c8>)
 800098c:	7011      	strb	r1, [r2, #0]
 800098e:	4619      	mov	r1, r3
 8000990:	f000 fad2 	bl	8000f38 <scan7SEG>
				segth %= 4;
 8000994:	4b65      	ldr	r3, [pc, #404]	; (8000b2c <fsm_automatic_run+0x4c8>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	f003 0303 	and.w	r3, r3, #3
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b63      	ldr	r3, [pc, #396]	; (8000b2c <fsm_automatic_run+0x4c8>)
 80009a0:	701a      	strb	r2, [r3, #0]
				setTimer(5, 2);
 80009a2:	2102      	movs	r1, #2
 80009a4:	4862      	ldr	r0, [pc, #392]	; (8000b30 <fsm_automatic_run+0x4cc>)
 80009a6:	f000 fd29 	bl	80013fc <setTimer>
			}
		}

		if(isbuttonpressed(0)){
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff fdc6 	bl	800053c <isbuttonpressed>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 808e 	beq.w	8000ad4 <fsm_automatic_run+0x470>
			status = MAN_RED;
 80009b8:	4b5e      	ldr	r3, [pc, #376]	; (8000b34 <fsm_automatic_run+0x4d0>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2102      	movs	r1, #2
 80009c2:	4857      	ldr	r0, [pc, #348]	; (8000b20 <fsm_automatic_run+0x4bc>)
 80009c4:	f001 f921 	bl	8001c0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2108      	movs	r1, #8
 80009cc:	4854      	ldr	r0, [pc, #336]	; (8000b20 <fsm_automatic_run+0x4bc>)
 80009ce:	f001 f91c 	bl	8001c0a <HAL_GPIO_WritePin>
			mode = 1;
 80009d2:	4b55      	ldr	r3, [pc, #340]	; (8000b28 <fsm_automatic_run+0x4c4>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
			setTimer(0.5, 0);
 80009d8:	2100      	movs	r1, #0
 80009da:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80009de:	f000 fd0d 	bl	80013fc <setTimer>
		}
		break;
 80009e2:	e077      	b.n	8000ad4 <fsm_automatic_run+0x470>

	case AMBER_RED:
		if(timer_flag[1]){
 80009e4:	4b4f      	ldr	r3, [pc, #316]	; (8000b24 <fsm_automatic_run+0x4c0>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d02b      	beq.n	8000a44 <fsm_automatic_run+0x3e0>
			led_count1 = led_duration[RED_DURA];
 80009ec:	4b52      	ldr	r3, [pc, #328]	; (8000b38 <fsm_automatic_run+0x4d4>)
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	4b52      	ldr	r3, [pc, #328]	; (8000b3c <fsm_automatic_run+0x4d8>)
 80009f2:	701a      	strb	r2, [r3, #0]
			led_count2 = led_duration[GREEN_DURA];
 80009f4:	4b50      	ldr	r3, [pc, #320]	; (8000b38 <fsm_automatic_run+0x4d4>)
 80009f6:	789a      	ldrb	r2, [r3, #2]
 80009f8:	4b51      	ldr	r3, [pc, #324]	; (8000b40 <fsm_automatic_run+0x4dc>)
 80009fa:	701a      	strb	r2, [r3, #0]
			++led_count1;
 80009fc:	4b4f      	ldr	r3, [pc, #316]	; (8000b3c <fsm_automatic_run+0x4d8>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b4d      	ldr	r3, [pc, #308]	; (8000b3c <fsm_automatic_run+0x4d8>)
 8000a06:	701a      	strb	r2, [r3, #0]
			++led_count2;
 8000a08:	4b4d      	ldr	r3, [pc, #308]	; (8000b40 <fsm_automatic_run+0x4dc>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b4b      	ldr	r3, [pc, #300]	; (8000b40 <fsm_automatic_run+0x4dc>)
 8000a12:	701a      	strb	r2, [r3, #0]
			status = RED_GREEN;
 8000a14:	4b47      	ldr	r3, [pc, #284]	; (8000b34 <fsm_automatic_run+0x4d0>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	4840      	ldr	r0, [pc, #256]	; (8000b20 <fsm_automatic_run+0x4bc>)
 8000a20:	f001 f8f3 	bl	8001c0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2108      	movs	r1, #8
 8000a28:	483d      	ldr	r0, [pc, #244]	; (8000b20 <fsm_automatic_run+0x4bc>)
 8000a2a:	f001 f8ee 	bl	8001c0a <HAL_GPIO_WritePin>
			setTimer(led_duration[GREEN_DURA], 1);
 8000a2e:	4b42      	ldr	r3, [pc, #264]	; (8000b38 <fsm_automatic_run+0x4d4>)
 8000a30:	789b      	ldrb	r3, [r3, #2]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fcf4 	bl	8000420 <__aeabi_ui2f>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 fcdd 	bl	80013fc <setTimer>
 8000a42:	e025      	b.n	8000a90 <fsm_automatic_run+0x42c>
			}
		else{
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2104      	movs	r1, #4
 8000a48:	4835      	ldr	r0, [pc, #212]	; (8000b20 <fsm_automatic_run+0x4bc>)
 8000a4a:	f001 f8de 	bl	8001c0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2108      	movs	r1, #8
 8000a52:	4833      	ldr	r0, [pc, #204]	; (8000b20 <fsm_automatic_run+0x4bc>)
 8000a54:	f001 f8d9 	bl	8001c0a <HAL_GPIO_WritePin>

			if(timer_flag[2]) {
 8000a58:	4b32      	ldr	r3, [pc, #200]	; (8000b24 <fsm_automatic_run+0x4c0>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d017      	beq.n	8000a90 <fsm_automatic_run+0x42c>
			scan7SEG(mode, segth++);
 8000a60:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <fsm_automatic_run+0x4c4>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <fsm_automatic_run+0x4c8>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	b2d1      	uxtb	r1, r2
 8000a6e:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <fsm_automatic_run+0x4c8>)
 8000a70:	7011      	strb	r1, [r2, #0]
 8000a72:	4619      	mov	r1, r3
 8000a74:	f000 fa60 	bl	8000f38 <scan7SEG>
			segth %= 4;
 8000a78:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <fsm_automatic_run+0x4c8>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	f003 0303 	and.w	r3, r3, #3
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <fsm_automatic_run+0x4c8>)
 8000a84:	701a      	strb	r2, [r3, #0]
			setTimer(0.5, 2);
 8000a86:	2102      	movs	r1, #2
 8000a88:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8000a8c:	f000 fcb6 	bl	80013fc <setTimer>
			}
		}

		if(isbuttonpressed(0)){
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fd53 	bl	800053c <isbuttonpressed>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d01d      	beq.n	8000ad8 <fsm_automatic_run+0x474>
			status = MAN_RED;
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <fsm_automatic_run+0x4d0>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	481e      	ldr	r0, [pc, #120]	; (8000b20 <fsm_automatic_run+0x4bc>)
 8000aa8:	f001 f8af 	bl	8001c0a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2108      	movs	r1, #8
 8000ab0:	481b      	ldr	r0, [pc, #108]	; (8000b20 <fsm_automatic_run+0x4bc>)
 8000ab2:	f001 f8aa 	bl	8001c0a <HAL_GPIO_WritePin>
			mode = 1;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <fsm_automatic_run+0x4c4>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
			setTimer(0.5, 0);
 8000abc:	2100      	movs	r1, #0
 8000abe:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8000ac2:	f000 fc9b 	bl	80013fc <setTimer>
			}
		break;
 8000ac6:	e007      	b.n	8000ad8 <fsm_automatic_run+0x474>

	default:
		break;
 8000ac8:	bf00      	nop
 8000aca:	e006      	b.n	8000ada <fsm_automatic_run+0x476>
		break;
 8000acc:	bf00      	nop
 8000ace:	e004      	b.n	8000ada <fsm_automatic_run+0x476>
		break;
 8000ad0:	bf00      	nop
 8000ad2:	e002      	b.n	8000ada <fsm_automatic_run+0x476>
		break;
 8000ad4:	bf00      	nop
 8000ad6:	e000      	b.n	8000ada <fsm_automatic_run+0x476>
		break;
 8000ad8:	bf00      	nop
	}
	if(timer_flag[0] && mode == 0){
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <fsm_automatic_run+0x4c0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d01c      	beq.n	8000b1c <fsm_automatic_run+0x4b8>
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <fsm_automatic_run+0x4c4>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d118      	bne.n	8000b1c <fsm_automatic_run+0x4b8>
		if(led_count1 > 0) --led_count1;
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <fsm_automatic_run+0x4d8>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d005      	beq.n	8000afe <fsm_automatic_run+0x49a>
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <fsm_automatic_run+0x4d8>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <fsm_automatic_run+0x4d8>)
 8000afc:	701a      	strb	r2, [r3, #0]
		if(led_count2 > 0) --led_count2;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <fsm_automatic_run+0x4dc>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d005      	beq.n	8000b12 <fsm_automatic_run+0x4ae>
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <fsm_automatic_run+0x4dc>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <fsm_automatic_run+0x4dc>)
 8000b10:	701a      	strb	r2, [r3, #0]
		setTimer(1, 0);
 8000b12:	2100      	movs	r1, #0
 8000b14:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000b18:	f000 fc70 	bl	80013fc <setTimer>
	}
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	20000084 	.word	0x20000084
 8000b28:	20000076 	.word	0x20000076
 8000b2c:	20000077 	.word	0x20000077
 8000b30:	40a00000 	.word	0x40a00000
 8000b34:	20000074 	.word	0x20000074
 8000b38:	20000038 	.word	0x20000038
 8000b3c:	2000003b 	.word	0x2000003b
 8000b40:	2000003c 	.word	0x2000003c

08000b44 <fsm_manual_run>:
 *      Author: Phong
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	switch(status){
 8000b48:	4ba6      	ldr	r3, [pc, #664]	; (8000de4 <fsm_manual_run+0x2a0>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	2b0e      	cmp	r3, #14
 8000b4e:	f000 80a8 	beq.w	8000ca2 <fsm_manual_run+0x15e>
 8000b52:	2b0e      	cmp	r3, #14
 8000b54:	f300 8125 	bgt.w	8000da2 <fsm_manual_run+0x25e>
 8000b58:	2b0c      	cmp	r3, #12
 8000b5a:	d002      	beq.n	8000b62 <fsm_manual_run+0x1e>
 8000b5c:	2b0d      	cmp	r3, #13
 8000b5e:	d050      	beq.n	8000c02 <fsm_manual_run+0xbe>
			if(isbuttonpressed(2)){
				led_duration[GREEN_DURA] = modify_val;
			}
			break;
		default:
			break;
 8000b60:	e11f      	b.n	8000da2 <fsm_manual_run+0x25e>
			if(timer_flag[2]) {
 8000b62:	4ba1      	ldr	r3, [pc, #644]	; (8000de8 <fsm_manual_run+0x2a4>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d01d      	beq.n	8000ba6 <fsm_manual_run+0x62>
				scan7SEG(mode, segth++);					//Display modified value and number of MODE
 8000b6a:	4ba0      	ldr	r3, [pc, #640]	; (8000dec <fsm_manual_run+0x2a8>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	4b9f      	ldr	r3, [pc, #636]	; (8000df0 <fsm_manual_run+0x2ac>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	1c5a      	adds	r2, r3, #1
 8000b76:	b2d1      	uxtb	r1, r2
 8000b78:	4a9d      	ldr	r2, [pc, #628]	; (8000df0 <fsm_manual_run+0x2ac>)
 8000b7a:	7011      	strb	r1, [r2, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f000 f9db 	bl	8000f38 <scan7SEG>
				segth %= 3;
 8000b82:	4b9b      	ldr	r3, [pc, #620]	; (8000df0 <fsm_manual_run+0x2ac>)
 8000b84:	781a      	ldrb	r2, [r3, #0]
 8000b86:	4b9b      	ldr	r3, [pc, #620]	; (8000df4 <fsm_manual_run+0x2b0>)
 8000b88:	fba3 1302 	umull	r1, r3, r3, r2
 8000b8c:	0859      	lsrs	r1, r3, #1
 8000b8e:	460b      	mov	r3, r1
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	440b      	add	r3, r1
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b95      	ldr	r3, [pc, #596]	; (8000df0 <fsm_manual_run+0x2ac>)
 8000b9a:	701a      	strb	r2, [r3, #0]
				setTimer(0.5, 2);
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8000ba2:	f000 fc2b 	bl	80013fc <setTimer>
			if(timer_flag[0]){
 8000ba6:	4b90      	ldr	r3, [pc, #576]	; (8000de8 <fsm_manual_run+0x2a4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d008      	beq.n	8000bc0 <fsm_manual_run+0x7c>
				HAL_GPIO_TogglePin(GPIOB, red1_Pin | red2_Pin);	//Red Leds blink every 0.5 sec
 8000bae:	2109      	movs	r1, #9
 8000bb0:	4891      	ldr	r0, [pc, #580]	; (8000df8 <fsm_manual_run+0x2b4>)
 8000bb2:	f001 f842 	bl	8001c3a <HAL_GPIO_TogglePin>
				setTimer(0.5, 0);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8000bbc:	f000 fc1e 	bl	80013fc <setTimer>
			if(isbuttonpressed(0)){								//If BUTTON1 is pressed, change to MODIFY_YELLOW state
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff fcbb 	bl	800053c <isbuttonpressed>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00d      	beq.n	8000be8 <fsm_manual_run+0xa4>
				status = MAN_AMBER;
 8000bcc:	4b85      	ldr	r3, [pc, #532]	; (8000de4 <fsm_manual_run+0x2a0>)
 8000bce:	220d      	movs	r2, #13
 8000bd0:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4888      	ldr	r0, [pc, #544]	; (8000df8 <fsm_manual_run+0x2b4>)
 8000bd8:	f001 f817 	bl	8001c0a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2108      	movs	r1, #8
 8000be0:	4885      	ldr	r0, [pc, #532]	; (8000df8 <fsm_manual_run+0x2b4>)
 8000be2:	f001 f812 	bl	8001c0a <HAL_GPIO_WritePin>
				break;
 8000be6:	e0e3      	b.n	8000db0 <fsm_manual_run+0x26c>
			if(isbuttonpressed(2)){								//If BUTTON3 is pressed, RED LEDs' duration = modify_val
 8000be8:	2002      	movs	r0, #2
 8000bea:	f7ff fca7 	bl	800053c <isbuttonpressed>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	f000 80d8 	beq.w	8000da6 <fsm_manual_run+0x262>
				led_duration[RED_DURA] = modify_val;
 8000bf6:	4b81      	ldr	r3, [pc, #516]	; (8000dfc <fsm_manual_run+0x2b8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b80      	ldr	r3, [pc, #512]	; (8000e00 <fsm_manual_run+0x2bc>)
 8000bfe:	701a      	strb	r2, [r3, #0]
			break;
 8000c00:	e0d1      	b.n	8000da6 <fsm_manual_run+0x262>
			if(timer_flag[2]) {
 8000c02:	4b79      	ldr	r3, [pc, #484]	; (8000de8 <fsm_manual_run+0x2a4>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d01d      	beq.n	8000c46 <fsm_manual_run+0x102>
				scan7SEG(mode, segth++);					//Display modified value and number of MODE
 8000c0a:	4b78      	ldr	r3, [pc, #480]	; (8000dec <fsm_manual_run+0x2a8>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	4b77      	ldr	r3, [pc, #476]	; (8000df0 <fsm_manual_run+0x2ac>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	b2d1      	uxtb	r1, r2
 8000c18:	4a75      	ldr	r2, [pc, #468]	; (8000df0 <fsm_manual_run+0x2ac>)
 8000c1a:	7011      	strb	r1, [r2, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f000 f98b 	bl	8000f38 <scan7SEG>
				segth %= 3;
 8000c22:	4b73      	ldr	r3, [pc, #460]	; (8000df0 <fsm_manual_run+0x2ac>)
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	4b73      	ldr	r3, [pc, #460]	; (8000df4 <fsm_manual_run+0x2b0>)
 8000c28:	fba3 1302 	umull	r1, r3, r3, r2
 8000c2c:	0859      	lsrs	r1, r3, #1
 8000c2e:	460b      	mov	r3, r1
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	440b      	add	r3, r1
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	4b6d      	ldr	r3, [pc, #436]	; (8000df0 <fsm_manual_run+0x2ac>)
 8000c3a:	701a      	strb	r2, [r3, #0]
				setTimer(0.5, 2);
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8000c42:	f000 fbdb 	bl	80013fc <setTimer>
			if(timer_flag[0]){
 8000c46:	4b68      	ldr	r3, [pc, #416]	; (8000de8 <fsm_manual_run+0x2a4>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d008      	beq.n	8000c60 <fsm_manual_run+0x11c>
				HAL_GPIO_TogglePin(GPIOB, yellow1_Pin | yellow2_Pin);
 8000c4e:	2124      	movs	r1, #36	; 0x24
 8000c50:	4869      	ldr	r0, [pc, #420]	; (8000df8 <fsm_manual_run+0x2b4>)
 8000c52:	f000 fff2 	bl	8001c3a <HAL_GPIO_TogglePin>
				setTimer(0.5, 0);
 8000c56:	2100      	movs	r1, #0
 8000c58:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8000c5c:	f000 fbce 	bl	80013fc <setTimer>
			if(isbuttonpressed(0)){
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff fc6b 	bl	800053c <isbuttonpressed>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d00d      	beq.n	8000c88 <fsm_manual_run+0x144>
				status = MAN_GREEN;
 8000c6c:	4b5d      	ldr	r3, [pc, #372]	; (8000de4 <fsm_manual_run+0x2a0>)
 8000c6e:	220e      	movs	r2, #14
 8000c70:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2104      	movs	r1, #4
 8000c76:	4860      	ldr	r0, [pc, #384]	; (8000df8 <fsm_manual_run+0x2b4>)
 8000c78:	f000 ffc7 	bl	8001c0a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2120      	movs	r1, #32
 8000c80:	485d      	ldr	r0, [pc, #372]	; (8000df8 <fsm_manual_run+0x2b4>)
 8000c82:	f000 ffc2 	bl	8001c0a <HAL_GPIO_WritePin>
				break;
 8000c86:	e093      	b.n	8000db0 <fsm_manual_run+0x26c>
			if(isbuttonpressed(2)){
 8000c88:	2002      	movs	r0, #2
 8000c8a:	f7ff fc57 	bl	800053c <isbuttonpressed>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 808a 	beq.w	8000daa <fsm_manual_run+0x266>
				led_duration[YELLOW_DURA] = modify_val;
 8000c96:	4b59      	ldr	r3, [pc, #356]	; (8000dfc <fsm_manual_run+0x2b8>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b58      	ldr	r3, [pc, #352]	; (8000e00 <fsm_manual_run+0x2bc>)
 8000c9e:	705a      	strb	r2, [r3, #1]
			break;
 8000ca0:	e083      	b.n	8000daa <fsm_manual_run+0x266>
			if(timer_flag[2]) {
 8000ca2:	4b51      	ldr	r3, [pc, #324]	; (8000de8 <fsm_manual_run+0x2a4>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d01d      	beq.n	8000ce6 <fsm_manual_run+0x1a2>
				scan7SEG(mode, segth++);					//Display modified value and number of MODE
 8000caa:	4b50      	ldr	r3, [pc, #320]	; (8000dec <fsm_manual_run+0x2a8>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	4b4f      	ldr	r3, [pc, #316]	; (8000df0 <fsm_manual_run+0x2ac>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	b2d1      	uxtb	r1, r2
 8000cb8:	4a4d      	ldr	r2, [pc, #308]	; (8000df0 <fsm_manual_run+0x2ac>)
 8000cba:	7011      	strb	r1, [r2, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f000 f93b 	bl	8000f38 <scan7SEG>
				segth %= 3;
 8000cc2:	4b4b      	ldr	r3, [pc, #300]	; (8000df0 <fsm_manual_run+0x2ac>)
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	4b4b      	ldr	r3, [pc, #300]	; (8000df4 <fsm_manual_run+0x2b0>)
 8000cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8000ccc:	0859      	lsrs	r1, r3, #1
 8000cce:	460b      	mov	r3, r1
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	440b      	add	r3, r1
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b45      	ldr	r3, [pc, #276]	; (8000df0 <fsm_manual_run+0x2ac>)
 8000cda:	701a      	strb	r2, [r3, #0]
				setTimer(0.5, 2);
 8000cdc:	2102      	movs	r1, #2
 8000cde:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8000ce2:	f000 fb8b 	bl	80013fc <setTimer>
			if(timer_flag[0]){
 8000ce6:	4b40      	ldr	r3, [pc, #256]	; (8000de8 <fsm_manual_run+0x2a4>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d008      	beq.n	8000d00 <fsm_manual_run+0x1bc>
				HAL_GPIO_TogglePin(GPIOB, green1_Pin | green2_Pin);
 8000cee:	2112      	movs	r1, #18
 8000cf0:	4841      	ldr	r0, [pc, #260]	; (8000df8 <fsm_manual_run+0x2b4>)
 8000cf2:	f000 ffa2 	bl	8001c3a <HAL_GPIO_TogglePin>
				setTimer(0.5, 0);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8000cfc:	f000 fb7e 	bl	80013fc <setTimer>
			if(isbuttonpressed(0)){
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff fc1b 	bl	800053c <isbuttonpressed>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d03e      	beq.n	8000d8a <fsm_manual_run+0x246>
				status = RED_GREEN;
 8000d0c:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <fsm_manual_run+0x2a0>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2102      	movs	r1, #2
 8000d16:	4838      	ldr	r0, [pc, #224]	; (8000df8 <fsm_manual_run+0x2b4>)
 8000d18:	f000 ff77 	bl	8001c0a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2110      	movs	r1, #16
 8000d20:	4835      	ldr	r0, [pc, #212]	; (8000df8 <fsm_manual_run+0x2b4>)
 8000d22:	f000 ff72 	bl	8001c0a <HAL_GPIO_WritePin>
				mode = 0;
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <fsm_manual_run+0x2a8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
				if(led_duration[RED_DURA] != led_duration[GREEN_DURA] + led_duration[YELLOW_DURA]){
 8000d2c:	4b34      	ldr	r3, [pc, #208]	; (8000e00 <fsm_manual_run+0x2bc>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <fsm_manual_run+0x2bc>)
 8000d34:	789b      	ldrb	r3, [r3, #2]
 8000d36:	4619      	mov	r1, r3
 8000d38:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <fsm_manual_run+0x2bc>)
 8000d3a:	785b      	ldrb	r3, [r3, #1]
 8000d3c:	440b      	add	r3, r1
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d00b      	beq.n	8000d5a <fsm_manual_run+0x216>
					led_duration[RED_DURA] = INIT_RED_DURA;			//if red_duration != yellow_duration + green_duration
 8000d42:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <fsm_manual_run+0x2bc>)
 8000d44:	2205      	movs	r2, #5
 8000d46:	701a      	strb	r2, [r3, #0]
					led_duration[YELLOW_DURA] = INIT_YELLOW_DURA;	//set all led duration to init_duration
 8000d48:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <fsm_manual_run+0x2bc>)
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	705a      	strb	r2, [r3, #1]
					led_duration[GREEN_DURA] = INIT_GREEN_DURA;		//and change to state INIT
 8000d4e:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <fsm_manual_run+0x2bc>)
 8000d50:	2203      	movs	r2, #3
 8000d52:	709a      	strb	r2, [r3, #2]
					mode = 1;
 8000d54:	4b25      	ldr	r3, [pc, #148]	; (8000dec <fsm_manual_run+0x2a8>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
				led_count1 = led_duration[RED_DURA];
 8000d5a:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <fsm_manual_run+0x2bc>)
 8000d5c:	781a      	ldrb	r2, [r3, #0]
 8000d5e:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <fsm_manual_run+0x2c0>)
 8000d60:	701a      	strb	r2, [r3, #0]
				led_count2 = led_duration[GREEN_DURA];
 8000d62:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <fsm_manual_run+0x2bc>)
 8000d64:	789a      	ldrb	r2, [r3, #2]
 8000d66:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <fsm_manual_run+0x2c4>)
 8000d68:	701a      	strb	r2, [r3, #0]
				setTimer(led_duration[GREEN_DURA], 1);
 8000d6a:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <fsm_manual_run+0x2bc>)
 8000d6c:	789b      	ldrb	r3, [r3, #2]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fb56 	bl	8000420 <__aeabi_ui2f>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2101      	movs	r1, #1
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 fb3f 	bl	80013fc <setTimer>
				setTimer(1, 0);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000d84:	f000 fb3a 	bl	80013fc <setTimer>
				break;
 8000d88:	e012      	b.n	8000db0 <fsm_manual_run+0x26c>
			if(isbuttonpressed(2)){
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f7ff fbd6 	bl	800053c <isbuttonpressed>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00b      	beq.n	8000dae <fsm_manual_run+0x26a>
				led_duration[GREEN_DURA] = modify_val;
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <fsm_manual_run+0x2b8>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <fsm_manual_run+0x2bc>)
 8000d9e:	709a      	strb	r2, [r3, #2]
			break;
 8000da0:	e005      	b.n	8000dae <fsm_manual_run+0x26a>
			break;
 8000da2:	bf00      	nop
 8000da4:	e004      	b.n	8000db0 <fsm_manual_run+0x26c>
			break;
 8000da6:	bf00      	nop
 8000da8:	e002      	b.n	8000db0 <fsm_manual_run+0x26c>
			break;
 8000daa:	bf00      	nop
 8000dac:	e000      	b.n	8000db0 <fsm_manual_run+0x26c>
			break;
 8000dae:	bf00      	nop
	}
	if(isbuttonpressed(1) && mode == 1){
 8000db0:	2001      	movs	r0, #1
 8000db2:	f7ff fbc3 	bl	800053c <isbuttonpressed>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d010      	beq.n	8000dde <fsm_manual_run+0x29a>
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <fsm_manual_run+0x2a8>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d10c      	bne.n	8000dde <fsm_manual_run+0x29a>
			++modify_val;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <fsm_manual_run+0x2b8>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <fsm_manual_run+0x2b8>)
 8000dce:	801a      	strh	r2, [r3, #0]
			if(modify_val == 100) modify_val = 1;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <fsm_manual_run+0x2b8>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2b64      	cmp	r3, #100	; 0x64
 8000dd6:	d102      	bne.n	8000dde <fsm_manual_run+0x29a>
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <fsm_manual_run+0x2b8>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	801a      	strh	r2, [r3, #0]
	}
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000074 	.word	0x20000074
 8000de8:	20000084 	.word	0x20000084
 8000dec:	20000076 	.word	0x20000076
 8000df0:	20000077 	.word	0x20000077
 8000df4:	aaaaaaab 	.word	0xaaaaaaab
 8000df8:	40010c00 	.word	0x40010c00
 8000dfc:	20000034 	.word	0x20000034
 8000e00:	20000038 	.word	0x20000038
 8000e04:	2000003b 	.word	0x2000003b
 8000e08:	2000003c 	.word	0x2000003c

08000e0c <display7SEG>:

uint8_t mode = 0;
uint8_t segth = 0;

void display7SEG(int num)
{
 8000e0c:	b5b0      	push	{r4, r5, r7, lr}
 8000e0e:	b08e      	sub	sp, #56	; 0x38
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
    const int segments[10] = {
 8000e14:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <display7SEG+0x124>)
 8000e16:	f107 040c 	add.w	r4, r7, #12
 8000e1a:	461d      	mov	r5, r3
 8000e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e28:	e884 0003 	stmia.w	r4, {r0, r1}
        0b00000111, // 7
        0b01111111, // 8
        0b01101111  // 9
    };

    uint8_t displaySegments = segments[num];
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e34:	4413      	add	r3, r2
 8000e36:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000e3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, (displaySegments & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000e3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	bf0c      	ite	eq
 8000e4a:	2301      	moveq	r3, #1
 8000e4c:	2300      	movne	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e56:	4837      	ldr	r0, [pc, #220]	; (8000f34 <display7SEG+0x128>)
 8000e58:	f000 fed7 	bl	8001c0a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, ((displaySegments >> 1) & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000e5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e60:	085b      	lsrs	r3, r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bf0c      	ite	eq
 8000e6c:	2301      	moveq	r3, #1
 8000e6e:	2300      	movne	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	461a      	mov	r2, r3
 8000e74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e78:	482e      	ldr	r0, [pc, #184]	; (8000f34 <display7SEG+0x128>)
 8000e7a:	f000 fec6 	bl	8001c0a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, ((displaySegments >> 2) & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000e7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2301      	moveq	r3, #1
 8000e90:	2300      	movne	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	461a      	mov	r2, r3
 8000e96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e9a:	4826      	ldr	r0, [pc, #152]	; (8000f34 <display7SEG+0x128>)
 8000e9c:	f000 feb5 	bl	8001c0a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, ((displaySegments >> 3) & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000ea0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ea4:	08db      	lsrs	r3, r3, #3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf0c      	ite	eq
 8000eb0:	2301      	moveq	r3, #1
 8000eb2:	2300      	movne	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ebc:	481d      	ldr	r0, [pc, #116]	; (8000f34 <display7SEG+0x128>)
 8000ebe:	f000 fea4 	bl	8001c0a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, ((displaySegments >> 4) & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000ec2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ec6:	091b      	lsrs	r3, r3, #4
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf0c      	ite	eq
 8000ed2:	2301      	moveq	r3, #1
 8000ed4:	2300      	movne	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ede:	4815      	ldr	r0, [pc, #84]	; (8000f34 <display7SEG+0x128>)
 8000ee0:	f000 fe93 	bl	8001c0a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, ((displaySegments >> 5) & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000ee4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ee8:	095b      	lsrs	r3, r3, #5
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	bf0c      	ite	eq
 8000ef4:	2301      	moveq	r3, #1
 8000ef6:	2300      	movne	r3, #0
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f00:	480c      	ldr	r0, [pc, #48]	; (8000f34 <display7SEG+0x128>)
 8000f02:	f000 fe82 	bl	8001c0a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, ((displaySegments >> 6) & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000f06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f0a:	099b      	lsrs	r3, r3, #6
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	bf0c      	ite	eq
 8000f16:	2301      	moveq	r3, #1
 8000f18:	2300      	movne	r3, #0
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f22:	4804      	ldr	r0, [pc, #16]	; (8000f34 <display7SEG+0x128>)
 8000f24:	f000 fe71 	bl	8001c0a <HAL_GPIO_WritePin>
}
 8000f28:	bf00      	nop
 8000f2a:	3738      	adds	r7, #56	; 0x38
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f30:	08002c64 	.word	0x08002c64
 8000f34:	40010800 	.word	0x40010800

08000f38 <scan7SEG>:

void scan7SEG(int mode, int index){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
	if(mode == 0){
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f040 80aa 	bne.w	800109e <scan7SEG+0x166>
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	f200 8091 	bhi.w	8001074 <scan7SEG+0x13c>
 8000f52:	a201      	add	r2, pc, #4	; (adr r2, 8000f58 <scan7SEG+0x20>)
 8000f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f58:	08000f69 	.word	0x08000f69
 8000f5c:	08000fa7 	.word	0x08000fa7
 8000f60:	08000fef 	.word	0x08000fef
 8000f64:	0800102d 	.word	0x0800102d
				switch(index){
						case 0:
							HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2110      	movs	r1, #16
 8000f6c:	488e      	ldr	r0, [pc, #568]	; (80011a8 <scan7SEG+0x270>)
 8000f6e:	f000 fe4c 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, 1);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2120      	movs	r1, #32
 8000f76:	488c      	ldr	r0, [pc, #560]	; (80011a8 <scan7SEG+0x270>)
 8000f78:	f000 fe47 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, 1);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2140      	movs	r1, #64	; 0x40
 8000f80:	4889      	ldr	r0, [pc, #548]	; (80011a8 <scan7SEG+0x270>)
 8000f82:	f000 fe42 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, 1);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	4887      	ldr	r0, [pc, #540]	; (80011a8 <scan7SEG+0x270>)
 8000f8c:	f000 fe3d 	bl	8001c0a <HAL_GPIO_WritePin>
							display7SEG(led_count1 / 10);
 8000f90:	4b86      	ldr	r3, [pc, #536]	; (80011ac <scan7SEG+0x274>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4a86      	ldr	r2, [pc, #536]	; (80011b0 <scan7SEG+0x278>)
 8000f96:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9a:	08db      	lsrs	r3, r3, #3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff34 	bl	8000e0c <display7SEG>
							break;
 8000fa4:	e0fb      	b.n	800119e <scan7SEG+0x266>
						case 1:
							HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, 1);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2110      	movs	r1, #16
 8000faa:	487f      	ldr	r0, [pc, #508]	; (80011a8 <scan7SEG+0x270>)
 8000fac:	f000 fe2d 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	487c      	ldr	r0, [pc, #496]	; (80011a8 <scan7SEG+0x270>)
 8000fb6:	f000 fe28 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2140      	movs	r1, #64	; 0x40
 8000fbe:	487a      	ldr	r0, [pc, #488]	; (80011a8 <scan7SEG+0x270>)
 8000fc0:	f000 fe23 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, 1);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	4877      	ldr	r0, [pc, #476]	; (80011a8 <scan7SEG+0x270>)
 8000fca:	f000 fe1e 	bl	8001c0a <HAL_GPIO_WritePin>
							display7SEG(led_count1 % 10);
 8000fce:	4b77      	ldr	r3, [pc, #476]	; (80011ac <scan7SEG+0x274>)
 8000fd0:	781a      	ldrb	r2, [r3, #0]
 8000fd2:	4b77      	ldr	r3, [pc, #476]	; (80011b0 <scan7SEG+0x278>)
 8000fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8000fd8:	08d9      	lsrs	r1, r3, #3
 8000fda:	460b      	mov	r3, r1
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff10 	bl	8000e0c <display7SEG>
							break;
 8000fec:	e0d7      	b.n	800119e <scan7SEG+0x266>
						case 2:
							HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, 1);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2110      	movs	r1, #16
 8000ff2:	486d      	ldr	r0, [pc, #436]	; (80011a8 <scan7SEG+0x270>)
 8000ff4:	f000 fe09 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, 1);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	486a      	ldr	r0, [pc, #424]	; (80011a8 <scan7SEG+0x270>)
 8000ffe:	f000 fe04 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2140      	movs	r1, #64	; 0x40
 8001006:	4868      	ldr	r0, [pc, #416]	; (80011a8 <scan7SEG+0x270>)
 8001008:	f000 fdff 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, 1);
 800100c:	2201      	movs	r2, #1
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	4865      	ldr	r0, [pc, #404]	; (80011a8 <scan7SEG+0x270>)
 8001012:	f000 fdfa 	bl	8001c0a <HAL_GPIO_WritePin>
							display7SEG(led_count2 / 10);
 8001016:	4b67      	ldr	r3, [pc, #412]	; (80011b4 <scan7SEG+0x27c>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	4a65      	ldr	r2, [pc, #404]	; (80011b0 <scan7SEG+0x278>)
 800101c:	fba2 2303 	umull	r2, r3, r2, r3
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fef1 	bl	8000e0c <display7SEG>
							break;
 800102a:	e0b8      	b.n	800119e <scan7SEG+0x266>
						case 3:
							HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, 1);
 800102c:	2201      	movs	r2, #1
 800102e:	2110      	movs	r1, #16
 8001030:	485d      	ldr	r0, [pc, #372]	; (80011a8 <scan7SEG+0x270>)
 8001032:	f000 fdea 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, 1);
 8001036:	2201      	movs	r2, #1
 8001038:	2120      	movs	r1, #32
 800103a:	485b      	ldr	r0, [pc, #364]	; (80011a8 <scan7SEG+0x270>)
 800103c:	f000 fde5 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, 1);
 8001040:	2201      	movs	r2, #1
 8001042:	2140      	movs	r1, #64	; 0x40
 8001044:	4858      	ldr	r0, [pc, #352]	; (80011a8 <scan7SEG+0x270>)
 8001046:	f000 fde0 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, 3);
 800104a:	2203      	movs	r2, #3
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	4856      	ldr	r0, [pc, #344]	; (80011a8 <scan7SEG+0x270>)
 8001050:	f000 fddb 	bl	8001c0a <HAL_GPIO_WritePin>
							display7SEG(led_count2 % 10);
 8001054:	4b57      	ldr	r3, [pc, #348]	; (80011b4 <scan7SEG+0x27c>)
 8001056:	781a      	ldrb	r2, [r3, #0]
 8001058:	4b55      	ldr	r3, [pc, #340]	; (80011b0 <scan7SEG+0x278>)
 800105a:	fba3 1302 	umull	r1, r3, r3, r2
 800105e:	08d9      	lsrs	r1, r3, #3
 8001060:	460b      	mov	r3, r1
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fecd 	bl	8000e0c <display7SEG>
							break;
 8001072:	e094      	b.n	800119e <scan7SEG+0x266>
						default:
							HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	484b      	ldr	r0, [pc, #300]	; (80011a8 <scan7SEG+0x270>)
 800107a:	f000 fdc6 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2120      	movs	r1, #32
 8001082:	4849      	ldr	r0, [pc, #292]	; (80011a8 <scan7SEG+0x270>)
 8001084:	f000 fdc1 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2140      	movs	r1, #64	; 0x40
 800108c:	4846      	ldr	r0, [pc, #280]	; (80011a8 <scan7SEG+0x270>)
 800108e:	f000 fdbc 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	4844      	ldr	r0, [pc, #272]	; (80011a8 <scan7SEG+0x270>)
 8001098:	f000 fdb7 	bl	8001c0a <HAL_GPIO_WritePin>
							break;
 800109c:	e07f      	b.n	800119e <scan7SEG+0x266>
				}

			}
		else{
				switch(index){
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d04c      	beq.n	800113e <scan7SEG+0x206>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dc64      	bgt.n	8001174 <scan7SEG+0x23c>
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <scan7SEG+0x180>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d01f      	beq.n	80010f6 <scan7SEG+0x1be>
 80010b6:	e05d      	b.n	8001174 <scan7SEG+0x23c>
						case 0:
							HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2110      	movs	r1, #16
 80010bc:	483a      	ldr	r0, [pc, #232]	; (80011a8 <scan7SEG+0x270>)
 80010be:	f000 fda4 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, 1);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2120      	movs	r1, #32
 80010c6:	4838      	ldr	r0, [pc, #224]	; (80011a8 <scan7SEG+0x270>)
 80010c8:	f000 fd9f 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, 1);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2140      	movs	r1, #64	; 0x40
 80010d0:	4835      	ldr	r0, [pc, #212]	; (80011a8 <scan7SEG+0x270>)
 80010d2:	f000 fd9a 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	4833      	ldr	r0, [pc, #204]	; (80011a8 <scan7SEG+0x270>)
 80010dc:	f000 fd95 	bl	8001c0a <HAL_GPIO_WritePin>
							display7SEG(modify_val / 10);
 80010e0:	4b35      	ldr	r3, [pc, #212]	; (80011b8 <scan7SEG+0x280>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	4a32      	ldr	r2, [pc, #200]	; (80011b0 <scan7SEG+0x278>)
 80010e6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ea:	08db      	lsrs	r3, r3, #3
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe8c 	bl	8000e0c <display7SEG>
							break;
 80010f4:	e053      	b.n	800119e <scan7SEG+0x266>
						case 1:
							HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, 1);
 80010f6:	2201      	movs	r2, #1
 80010f8:	2110      	movs	r1, #16
 80010fa:	482b      	ldr	r0, [pc, #172]	; (80011a8 <scan7SEG+0x270>)
 80010fc:	f000 fd85 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2120      	movs	r1, #32
 8001104:	4828      	ldr	r0, [pc, #160]	; (80011a8 <scan7SEG+0x270>)
 8001106:	f000 fd80 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, 1);
 800110a:	2201      	movs	r2, #1
 800110c:	2140      	movs	r1, #64	; 0x40
 800110e:	4826      	ldr	r0, [pc, #152]	; (80011a8 <scan7SEG+0x270>)
 8001110:	f000 fd7b 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, 1);
 8001114:	2201      	movs	r2, #1
 8001116:	2180      	movs	r1, #128	; 0x80
 8001118:	4823      	ldr	r0, [pc, #140]	; (80011a8 <scan7SEG+0x270>)
 800111a:	f000 fd76 	bl	8001c0a <HAL_GPIO_WritePin>
							display7SEG(modify_val % 10);
 800111e:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <scan7SEG+0x280>)
 8001120:	881a      	ldrh	r2, [r3, #0]
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <scan7SEG+0x278>)
 8001124:	fba3 1302 	umull	r1, r3, r3, r2
 8001128:	08d9      	lsrs	r1, r3, #3
 800112a:	460b      	mov	r3, r1
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	b29b      	uxth	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fe68 	bl	8000e0c <display7SEG>
							break;
 800113c:	e02f      	b.n	800119e <scan7SEG+0x266>
						case 2:
							HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, 1);
 800113e:	2201      	movs	r2, #1
 8001140:	2110      	movs	r1, #16
 8001142:	4819      	ldr	r0, [pc, #100]	; (80011a8 <scan7SEG+0x270>)
 8001144:	f000 fd61 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	2120      	movs	r1, #32
 800114c:	4816      	ldr	r0, [pc, #88]	; (80011a8 <scan7SEG+0x270>)
 800114e:	f000 fd5c 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2140      	movs	r1, #64	; 0x40
 8001156:	4814      	ldr	r0, [pc, #80]	; (80011a8 <scan7SEG+0x270>)
 8001158:	f000 fd57 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	4811      	ldr	r0, [pc, #68]	; (80011a8 <scan7SEG+0x270>)
 8001162:	f000 fd52 	bl	8001c0a <HAL_GPIO_WritePin>
							display7SEG(status - 10);
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <scan7SEG+0x284>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	3b0a      	subs	r3, #10
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fe4d 	bl	8000e0c <display7SEG>
							break;
 8001172:	e014      	b.n	800119e <scan7SEG+0x266>
						default:
							HAL_GPIO_WritePin(E0_GPIO_Port, E0_Pin, 1);
 8001174:	2201      	movs	r2, #1
 8001176:	2110      	movs	r1, #16
 8001178:	480b      	ldr	r0, [pc, #44]	; (80011a8 <scan7SEG+0x270>)
 800117a:	f000 fd46 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E1_GPIO_Port, E1_Pin, 1);
 800117e:	2201      	movs	r2, #1
 8001180:	2120      	movs	r1, #32
 8001182:	4809      	ldr	r0, [pc, #36]	; (80011a8 <scan7SEG+0x270>)
 8001184:	f000 fd41 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E2_GPIO_Port, E2_Pin, 1);
 8001188:	2201      	movs	r2, #1
 800118a:	2140      	movs	r1, #64	; 0x40
 800118c:	4806      	ldr	r0, [pc, #24]	; (80011a8 <scan7SEG+0x270>)
 800118e:	f000 fd3c 	bl	8001c0a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, 1);
 8001192:	2201      	movs	r2, #1
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	4804      	ldr	r0, [pc, #16]	; (80011a8 <scan7SEG+0x270>)
 8001198:	f000 fd37 	bl	8001c0a <HAL_GPIO_WritePin>
							break;
 800119c:	bf00      	nop
					}
				}
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40010800 	.word	0x40010800
 80011ac:	2000003b 	.word	0x2000003b
 80011b0:	cccccccd 	.word	0xcccccccd
 80011b4:	2000003c 	.word	0x2000003c
 80011b8:	20000034 	.word	0x20000034
 80011bc:	20000074 	.word	0x20000074

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c4:	f000 fa20 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c8:	f000 f80e 	bl	80011e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011cc:	f000 f894 	bl	80012f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011d0:	f000 f846 	bl	8001260 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <main+0x24>)
 80011d6:	f001 f975 	bl	80024c4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_automatic_run();
 80011da:	f7ff fa43 	bl	8000664 <fsm_automatic_run>
	  fsm_manual_run();
 80011de:	f7ff fcb1 	bl	8000b44 <fsm_manual_run>
	  fsm_automatic_run();
 80011e2:	e7fa      	b.n	80011da <main+0x1a>
 80011e4:	20000090 	.word	0x20000090

080011e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b090      	sub	sp, #64	; 0x40
 80011ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ee:	f107 0318 	add.w	r3, r7, #24
 80011f2:	2228      	movs	r2, #40	; 0x28
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fd20 	bl	8002c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120e:	2301      	movs	r3, #1
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001212:	2310      	movs	r3, #16
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001216:	2300      	movs	r3, #0
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121a:	f107 0318 	add.w	r3, r7, #24
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fd24 	bl	8001c6c <HAL_RCC_OscConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800122a:	f000 f8e2 	bl	80013f2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122e:	230f      	movs	r3, #15
 8001230:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f000 ff90 	bl	800216c <HAL_RCC_ClockConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001252:	f000 f8ce 	bl	80013f2 <Error_Handler>
  }
}
 8001256:	bf00      	nop
 8001258:	3740      	adds	r7, #64	; 0x40
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	463b      	mov	r3, r7
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <MX_TIM2_Init+0x94>)
 800127e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001282:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_TIM2_Init+0x94>)
 8001286:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800128a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_TIM2_Init+0x94>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <MX_TIM2_Init+0x94>)
 8001294:	2209      	movs	r2, #9
 8001296:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_TIM2_Init+0x94>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <MX_TIM2_Init+0x94>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012a4:	4813      	ldr	r0, [pc, #76]	; (80012f4 <MX_TIM2_Init+0x94>)
 80012a6:	f001 f8bd 	bl	8002424 <HAL_TIM_Base_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012b0:	f000 f89f 	bl	80013f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	4619      	mov	r1, r3
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <MX_TIM2_Init+0x94>)
 80012c2:	f001 fa53 	bl	800276c <HAL_TIM_ConfigClockSource>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012cc:	f000 f891 	bl	80013f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_TIM2_Init+0x94>)
 80012de:	f001 fc1f 	bl	8002b20 <HAL_TIMEx_MasterConfigSynchronization>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012e8:	f000 f883 	bl	80013f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000090 	.word	0x20000090

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <MX_GPIO_Init+0xb4>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a26      	ldr	r2, [pc, #152]	; (80013ac <MX_GPIO_Init+0xb4>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b24      	ldr	r3, [pc, #144]	; (80013ac <MX_GPIO_Init+0xb4>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_GPIO_Init+0xb4>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a20      	ldr	r2, [pc, #128]	; (80013ac <MX_GPIO_Init+0xb4>)
 800132a:	f043 0308 	orr.w	r3, r3, #8
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_GPIO_Init+0xb4>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, E0_Pin|E1_Pin|E2_Pin|E3_Pin
 800133c:	2200      	movs	r2, #0
 800133e:	f64f 61f0 	movw	r1, #65264	; 0xfef0
 8001342:	481b      	ldr	r0, [pc, #108]	; (80013b0 <MX_GPIO_Init+0xb8>)
 8001344:	f000 fc61 	bl	8001c0a <HAL_GPIO_WritePin>
                          |a_Pin|b_Pin|c_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, red1_Pin|green1_Pin|yellow1_Pin|red2_Pin
 8001348:	2200      	movs	r2, #0
 800134a:	213f      	movs	r1, #63	; 0x3f
 800134c:	4819      	ldr	r0, [pc, #100]	; (80013b4 <MX_GPIO_Init+0xbc>)
 800134e:	f000 fc5c 	bl	8001c0a <HAL_GPIO_WritePin>
                          |green2_Pin|yellow2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8001352:	230e      	movs	r3, #14
 8001354:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	4619      	mov	r1, r3
 8001364:	4812      	ldr	r0, [pc, #72]	; (80013b0 <MX_GPIO_Init+0xb8>)
 8001366:	f000 fabf 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : E0_Pin E1_Pin E2_Pin E3_Pin
                           a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = E0_Pin|E1_Pin|E2_Pin|E3_Pin
 800136a:	f64f 63f0 	movw	r3, #65264	; 0xfef0
 800136e:	60bb      	str	r3, [r7, #8]
                          |a_Pin|b_Pin|c_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2302      	movs	r3, #2
 800137a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	4619      	mov	r1, r3
 8001382:	480b      	ldr	r0, [pc, #44]	; (80013b0 <MX_GPIO_Init+0xb8>)
 8001384:	f000 fab0 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : red1_Pin green1_Pin yellow1_Pin red2_Pin
                           green2_Pin yellow2_Pin */
  GPIO_InitStruct.Pin = red1_Pin|green1_Pin|yellow1_Pin|red2_Pin
 8001388:	233f      	movs	r3, #63	; 0x3f
 800138a:	60bb      	str	r3, [r7, #8]
                          |green2_Pin|yellow2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2302      	movs	r3, #2
 8001396:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4619      	mov	r1, r3
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_GPIO_Init+0xbc>)
 80013a0:	f000 faa2 	bl	80018e8 <HAL_GPIO_Init>

}
 80013a4:	bf00      	nop
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010800 	.word	0x40010800
 80013b4:	40010c00 	.word	0x40010c00

080013b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	timerRun(0);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f000 f845 	bl	8001450 <timerRun>
	timerRun(1);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f000 f842 	bl	8001450 <timerRun>
	timerRun(2);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f000 f83f 	bl	8001450 <timerRun>
	getkeyinput(0, button1_Pin);
 80013d2:	2102      	movs	r1, #2
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff f8cb 	bl	8000570 <getkeyinput>
	getkeyinput(1, button2_Pin);
 80013da:	2104      	movs	r1, #4
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff f8c7 	bl	8000570 <getkeyinput>
	getkeyinput(2, button3_Pin);
 80013e2:	2108      	movs	r1, #8
 80013e4:	2002      	movs	r0, #2
 80013e6:	f7ff f8c3 	bl	8000570 <getkeyinput>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f6:	b672      	cpsid	i
}
 80013f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fa:	e7fe      	b.n	80013fa <Error_Handler+0x8>

080013fc <setTimer>:
// index 1: for second
// index 2: for led duration
// index 3: for scan 7SEG
int timer_flag[3] = {0, 0, 0};

void setTimer(float duration, int id){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	timer_counter[id] = (int) (1000 * duration) / TIMER_DURATION;
 8001406:	490e      	ldr	r1, [pc, #56]	; (8001440 <setTimer+0x44>)
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7fe fe9f 	bl	800014c <__aeabi_fmul>
 800140e:	4603      	mov	r3, r0
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f85d 	bl	80004d0 <__aeabi_f2iz>
 8001416:	4603      	mov	r3, r0
 8001418:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <setTimer+0x48>)
 800141a:	fb82 1203 	smull	r1, r2, r2, r3
 800141e:	1092      	asrs	r2, r2, #2
 8001420:	17db      	asrs	r3, r3, #31
 8001422:	1ad2      	subs	r2, r2, r3
 8001424:	4908      	ldr	r1, [pc, #32]	; (8001448 <setTimer+0x4c>)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[id] = 0;
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <setTimer+0x50>)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	2100      	movs	r1, #0
 8001432:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	447a0000 	.word	0x447a0000
 8001444:	66666667 	.word	0x66666667
 8001448:	20000078 	.word	0x20000078
 800144c:	20000084 	.word	0x20000084

08001450 <timerRun>:

void timerRun(int id){
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	if(timer_counter[id] > 0){
 8001458:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <timerRun+0x48>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001460:	2b00      	cmp	r3, #0
 8001462:	dd13      	ble.n	800148c <timerRun+0x3c>
		timer_counter[id]--;
 8001464:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <timerRun+0x48>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146c:	1e5a      	subs	r2, r3, #1
 800146e:	490a      	ldr	r1, [pc, #40]	; (8001498 <timerRun+0x48>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[id] <= 0){
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <timerRun+0x48>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147e:	2b00      	cmp	r3, #0
 8001480:	dc04      	bgt.n	800148c <timerRun+0x3c>
			timer_flag[id] = 1;
 8001482:	4a06      	ldr	r2, [pc, #24]	; (800149c <timerRun+0x4c>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2101      	movs	r1, #1
 8001488:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000078 	.word	0x20000078
 800149c:	20000084 	.word	0x20000084

080014a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_MspInit+0x5c>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	4a14      	ldr	r2, [pc, #80]	; (80014fc <HAL_MspInit+0x5c>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6193      	str	r3, [r2, #24]
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_MspInit+0x5c>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_MspInit+0x5c>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_MspInit+0x5c>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_MspInit+0x5c>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_MspInit+0x60>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_MspInit+0x60>)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010000 	.word	0x40010000

08001504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001514:	d113      	bne.n	800153e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_TIM_Base_MspInit+0x44>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <HAL_TIM_Base_MspInit+0x44>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_TIM_Base_MspInit+0x44>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	210f      	movs	r1, #15
 8001532:	201c      	movs	r0, #28
 8001534:	f000 f9a1 	bl	800187a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001538:	201c      	movs	r0, #28
 800153a:	f000 f9ba 	bl	80018b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <NMI_Handler+0x4>

08001552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <HardFault_Handler+0x4>

08001558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <MemManage_Handler+0x4>

0800155e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <UsageFault_Handler+0x4>

0800156a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001592:	f000 f87f 	bl	8001694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <TIM2_IRQHandler+0x10>)
 80015a2:	f000 ffdb 	bl	800255c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000090 	.word	0x20000090

080015b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015bc:	f7ff fff8 	bl	80015b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c0:	480b      	ldr	r0, [pc, #44]	; (80015f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015c2:	490c      	ldr	r1, [pc, #48]	; (80015f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015c4:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015d8:	4c09      	ldr	r4, [pc, #36]	; (8001600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e6:	f001 fb05 	bl	8002bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ea:	f7ff fde9 	bl	80011c0 <main>
  bx lr
 80015ee:	4770      	bx	lr
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80015f8:	08002cb8 	.word	0x08002cb8
  ldr r2, =_sbss
 80015fc:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001600:	200000dc 	.word	0x200000dc

08001604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC1_2_IRQHandler>
	...

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_Init+0x28>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a07      	ldr	r2, [pc, #28]	; (8001630 <HAL_Init+0x28>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001618:	2003      	movs	r0, #3
 800161a:	f000 f923 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161e:	200f      	movs	r0, #15
 8001620:	f000 f808 	bl	8001634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001624:	f7ff ff3c 	bl	80014a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40022000 	.word	0x40022000

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_InitTick+0x54>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_InitTick+0x58>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164a:	fbb3 f3f1 	udiv	r3, r3, r1
 800164e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f93b 	bl	80018ce <HAL_SYSTICK_Config>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e00e      	b.n	8001680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b0f      	cmp	r3, #15
 8001666:	d80a      	bhi.n	800167e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001668:	2200      	movs	r2, #0
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f000 f903 	bl	800187a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001674:	4a06      	ldr	r2, [pc, #24]	; (8001690 <HAL_InitTick+0x5c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000040 	.word	0x20000040
 800168c:	20000048 	.word	0x20000048
 8001690:	20000044 	.word	0x20000044

08001694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_IncTick+0x1c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_IncTick+0x20>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <HAL_IncTick+0x20>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	20000048 	.word	0x20000048
 80016b4:	200000d8 	.word	0x200000d8

080016b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <HAL_GetTick+0x10>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	200000d8 	.word	0x200000d8

080016cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	2b00      	cmp	r3, #0
 8001740:	db0b      	blt.n	800175a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f003 021f 	and.w	r2, r3, #31
 8001748:	4906      	ldr	r1, [pc, #24]	; (8001764 <__NVIC_EnableIRQ+0x34>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	2001      	movs	r0, #1
 8001752:	fa00 f202 	lsl.w	r2, r0, r2
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100

08001768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db0a      	blt.n	8001792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	490c      	ldr	r1, [pc, #48]	; (80017b4 <__NVIC_SetPriority+0x4c>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440b      	add	r3, r1
 800178c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001790:	e00a      	b.n	80017a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4908      	ldr	r1, [pc, #32]	; (80017b8 <__NVIC_SetPriority+0x50>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3b04      	subs	r3, #4
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	761a      	strb	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000e100 	.word	0xe000e100
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f1c3 0307 	rsb	r3, r3, #7
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	bf28      	it	cs
 80017da:	2304      	movcs	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3304      	adds	r3, #4
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d902      	bls.n	80017ec <NVIC_EncodePriority+0x30>
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b03      	subs	r3, #3
 80017ea:	e000      	b.n	80017ee <NVIC_EncodePriority+0x32>
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43d9      	mvns	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	4313      	orrs	r3, r2
         );
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	d301      	bcc.n	8001836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001832:	2301      	movs	r3, #1
 8001834:	e00f      	b.n	8001856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <SysTick_Config+0x40>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183e:	210f      	movs	r1, #15
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f7ff ff90 	bl	8001768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SysTick_Config+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SysTick_Config+0x40>)
 8001850:	2207      	movs	r2, #7
 8001852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010

08001864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff2d 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800188c:	f7ff ff42 	bl	8001714 <__NVIC_GetPriorityGrouping>
 8001890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ff90 	bl	80017bc <NVIC_EncodePriority>
 800189c:	4602      	mov	r2, r0
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff5f 	bl	8001768 <__NVIC_SetPriority>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff35 	bl	8001730 <__NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffa2 	bl	8001820 <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b08b      	sub	sp, #44	; 0x2c
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fa:	e148      	b.n	8001b8e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018fc:	2201      	movs	r2, #1
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	429a      	cmp	r2, r3
 8001916:	f040 8137 	bne.w	8001b88 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4aa3      	ldr	r2, [pc, #652]	; (8001bac <HAL_GPIO_Init+0x2c4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d05e      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001924:	4aa1      	ldr	r2, [pc, #644]	; (8001bac <HAL_GPIO_Init+0x2c4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d875      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 800192a:	4aa1      	ldr	r2, [pc, #644]	; (8001bb0 <HAL_GPIO_Init+0x2c8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d058      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001930:	4a9f      	ldr	r2, [pc, #636]	; (8001bb0 <HAL_GPIO_Init+0x2c8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d86f      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 8001936:	4a9f      	ldr	r2, [pc, #636]	; (8001bb4 <HAL_GPIO_Init+0x2cc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d052      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 800193c:	4a9d      	ldr	r2, [pc, #628]	; (8001bb4 <HAL_GPIO_Init+0x2cc>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d869      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 8001942:	4a9d      	ldr	r2, [pc, #628]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d04c      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001948:	4a9b      	ldr	r2, [pc, #620]	; (8001bb8 <HAL_GPIO_Init+0x2d0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d863      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 800194e:	4a9b      	ldr	r2, [pc, #620]	; (8001bbc <HAL_GPIO_Init+0x2d4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d046      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001954:	4a99      	ldr	r2, [pc, #612]	; (8001bbc <HAL_GPIO_Init+0x2d4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d85d      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 800195a:	2b12      	cmp	r3, #18
 800195c:	d82a      	bhi.n	80019b4 <HAL_GPIO_Init+0xcc>
 800195e:	2b12      	cmp	r3, #18
 8001960:	d859      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 8001962:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <HAL_GPIO_Init+0x80>)
 8001964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001968:	080019e3 	.word	0x080019e3
 800196c:	080019bd 	.word	0x080019bd
 8001970:	080019cf 	.word	0x080019cf
 8001974:	08001a11 	.word	0x08001a11
 8001978:	08001a17 	.word	0x08001a17
 800197c:	08001a17 	.word	0x08001a17
 8001980:	08001a17 	.word	0x08001a17
 8001984:	08001a17 	.word	0x08001a17
 8001988:	08001a17 	.word	0x08001a17
 800198c:	08001a17 	.word	0x08001a17
 8001990:	08001a17 	.word	0x08001a17
 8001994:	08001a17 	.word	0x08001a17
 8001998:	08001a17 	.word	0x08001a17
 800199c:	08001a17 	.word	0x08001a17
 80019a0:	08001a17 	.word	0x08001a17
 80019a4:	08001a17 	.word	0x08001a17
 80019a8:	08001a17 	.word	0x08001a17
 80019ac:	080019c5 	.word	0x080019c5
 80019b0:	080019d9 	.word	0x080019d9
 80019b4:	4a82      	ldr	r2, [pc, #520]	; (8001bc0 <HAL_GPIO_Init+0x2d8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d013      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ba:	e02c      	b.n	8001a16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e029      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	3304      	adds	r3, #4
 80019ca:	623b      	str	r3, [r7, #32]
          break;
 80019cc:	e024      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	3308      	adds	r3, #8
 80019d4:	623b      	str	r3, [r7, #32]
          break;
 80019d6:	e01f      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	330c      	adds	r3, #12
 80019de:	623b      	str	r3, [r7, #32]
          break;
 80019e0:	e01a      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ea:	2304      	movs	r3, #4
 80019ec:	623b      	str	r3, [r7, #32]
          break;
 80019ee:	e013      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d105      	bne.n	8001a04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f8:	2308      	movs	r3, #8
 80019fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	611a      	str	r2, [r3, #16]
          break;
 8001a02:	e009      	b.n	8001a18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a04:	2308      	movs	r3, #8
 8001a06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	615a      	str	r2, [r3, #20]
          break;
 8001a0e:	e003      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
          break;
 8001a14:	e000      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          break;
 8001a16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2bff      	cmp	r3, #255	; 0xff
 8001a1c:	d801      	bhi.n	8001a22 <HAL_GPIO_Init+0x13a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	e001      	b.n	8001a26 <HAL_GPIO_Init+0x13e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3304      	adds	r3, #4
 8001a26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2bff      	cmp	r3, #255	; 0xff
 8001a2c:	d802      	bhi.n	8001a34 <HAL_GPIO_Init+0x14c>
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0x152>
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	3b08      	subs	r3, #8
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	210f      	movs	r1, #15
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	6a39      	ldr	r1, [r7, #32]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	431a      	orrs	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8090 	beq.w	8001b88 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a68:	4b56      	ldr	r3, [pc, #344]	; (8001bc4 <HAL_GPIO_Init+0x2dc>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a55      	ldr	r2, [pc, #340]	; (8001bc4 <HAL_GPIO_Init+0x2dc>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_GPIO_Init+0x2dc>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a80:	4a51      	ldr	r2, [pc, #324]	; (8001bc8 <HAL_GPIO_Init+0x2e0>)
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	089b      	lsrs	r3, r3, #2
 8001a86:	3302      	adds	r3, #2
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220f      	movs	r2, #15
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a49      	ldr	r2, [pc, #292]	; (8001bcc <HAL_GPIO_Init+0x2e4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_GPIO_Init+0x1e0>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a48      	ldr	r2, [pc, #288]	; (8001bd0 <HAL_GPIO_Init+0x2e8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d007      	beq.n	8001ac4 <HAL_GPIO_Init+0x1dc>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a47      	ldr	r2, [pc, #284]	; (8001bd4 <HAL_GPIO_Init+0x2ec>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d101      	bne.n	8001ac0 <HAL_GPIO_Init+0x1d8>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e004      	b.n	8001aca <HAL_GPIO_Init+0x1e2>
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e002      	b.n	8001aca <HAL_GPIO_Init+0x1e2>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <HAL_GPIO_Init+0x1e2>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001acc:	f002 0203 	and.w	r2, r2, #3
 8001ad0:	0092      	lsls	r2, r2, #2
 8001ad2:	4093      	lsls	r3, r2
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ada:	493b      	ldr	r1, [pc, #236]	; (8001bc8 <HAL_GPIO_Init+0x2e0>)
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001af4:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	4937      	ldr	r1, [pc, #220]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b02:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	4933      	ldr	r1, [pc, #204]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b1c:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	492d      	ldr	r1, [pc, #180]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60cb      	str	r3, [r1, #12]
 8001b28:	e006      	b.n	8001b38 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	4929      	ldr	r1, [pc, #164]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	4923      	ldr	r1, [pc, #140]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	491f      	ldr	r1, [pc, #124]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d006      	beq.n	8001b7a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4919      	ldr	r1, [pc, #100]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
 8001b78:	e006      	b.n	8001b88 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	4915      	ldr	r1, [pc, #84]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f47f aeaf 	bne.w	80018fc <HAL_GPIO_Init+0x14>
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	bf00      	nop
 8001ba2:	372c      	adds	r7, #44	; 0x2c
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	10320000 	.word	0x10320000
 8001bb0:	10310000 	.word	0x10310000
 8001bb4:	10220000 	.word	0x10220000
 8001bb8:	10210000 	.word	0x10210000
 8001bbc:	10120000 	.word	0x10120000
 8001bc0:	10110000 	.word	0x10110000
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	40010800 	.word	0x40010800
 8001bd0:	40010c00 	.word	0x40010c00
 8001bd4:	40011000 	.word	0x40011000
 8001bd8:	40010400 	.word	0x40010400

08001bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	e001      	b.n	8001bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr

08001c0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	807b      	strh	r3, [r7, #2]
 8001c16:	4613      	mov	r3, r2
 8001c18:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c1a:	787b      	ldrb	r3, [r7, #1]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c20:	887a      	ldrh	r2, [r7, #2]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c26:	e003      	b.n	8001c30 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c28:	887b      	ldrh	r3, [r7, #2]
 8001c2a:	041a      	lsls	r2, r3, #16
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	611a      	str	r2, [r3, #16]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c4c:	887a      	ldrh	r2, [r7, #2]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	041a      	lsls	r2, r3, #16
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	887b      	ldrh	r3, [r7, #2]
 8001c5a:	400b      	ands	r3, r1
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	611a      	str	r2, [r3, #16]
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e26c      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8087 	beq.w	8001d9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c8c:	4b92      	ldr	r3, [pc, #584]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d00c      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c98:	4b8f      	ldr	r3, [pc, #572]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d112      	bne.n	8001cca <HAL_RCC_OscConfig+0x5e>
 8001ca4:	4b8c      	ldr	r3, [pc, #560]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb0:	d10b      	bne.n	8001cca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb2:	4b89      	ldr	r3, [pc, #548]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d06c      	beq.n	8001d98 <HAL_RCC_OscConfig+0x12c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d168      	bne.n	8001d98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e246      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x76>
 8001cd4:	4b80      	ldr	r3, [pc, #512]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a7f      	ldr	r2, [pc, #508]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e02e      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x98>
 8001cea:	4b7b      	ldr	r3, [pc, #492]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a7a      	ldr	r2, [pc, #488]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b78      	ldr	r3, [pc, #480]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a77      	ldr	r2, [pc, #476]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e01d      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0xbc>
 8001d0e:	4b72      	ldr	r3, [pc, #456]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a71      	ldr	r2, [pc, #452]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4b6f      	ldr	r3, [pc, #444]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6e      	ldr	r2, [pc, #440]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001d28:	4b6b      	ldr	r3, [pc, #428]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a6a      	ldr	r2, [pc, #424]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b68      	ldr	r3, [pc, #416]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a67      	ldr	r2, [pc, #412]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d013      	beq.n	8001d70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff fcb6 	bl	80016b8 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d50:	f7ff fcb2 	bl	80016b8 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	; 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e1fa      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b5d      	ldr	r3, [pc, #372]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0xe4>
 8001d6e:	e014      	b.n	8001d9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff fca2 	bl	80016b8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff fc9e 	bl	80016b8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e1e6      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	4b53      	ldr	r3, [pc, #332]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x10c>
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d063      	beq.n	8001e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da6:	4b4c      	ldr	r3, [pc, #304]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001db2:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d11c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x18c>
 8001dbe:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d116      	bne.n	8001df8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <HAL_RCC_OscConfig+0x176>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e1ba      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de2:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4939      	ldr	r1, [pc, #228]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df6:	e03a      	b.n	8001e6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d020      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e00:	4b36      	ldr	r3, [pc, #216]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7ff fc57 	bl	80016b8 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fc53 	bl	80016b8 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e19b      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4927      	ldr	r1, [pc, #156]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
 8001e40:	e015      	b.n	8001e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff fc36 	bl	80016b8 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff fc32 	bl	80016b8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e17a      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d03a      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d019      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e88:	f7ff fc16 	bl	80016b8 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7ff fc12 	bl	80016b8 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e15a      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f000 fa9a 	bl	80023e8 <RCC_Delay>
 8001eb4:	e01c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fbfc 	bl	80016b8 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec2:	e00f      	b.n	8001ee4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7ff fbf8 	bl	80016b8 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d908      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e140      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	42420000 	.word	0x42420000
 8001ee0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee4:	4b9e      	ldr	r3, [pc, #632]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1e9      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80a6 	beq.w	800204a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f02:	4b97      	ldr	r3, [pc, #604]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10d      	bne.n	8001f2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	4b94      	ldr	r3, [pc, #592]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a93      	ldr	r2, [pc, #588]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f18:	61d3      	str	r3, [r2, #28]
 8001f1a:	4b91      	ldr	r3, [pc, #580]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f26:	2301      	movs	r3, #1
 8001f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	4b8e      	ldr	r3, [pc, #568]	; (8002164 <HAL_RCC_OscConfig+0x4f8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d118      	bne.n	8001f68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f36:	4b8b      	ldr	r3, [pc, #556]	; (8002164 <HAL_RCC_OscConfig+0x4f8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a8a      	ldr	r2, [pc, #552]	; (8002164 <HAL_RCC_OscConfig+0x4f8>)
 8001f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f42:	f7ff fbb9 	bl	80016b8 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4a:	f7ff fbb5 	bl	80016b8 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b64      	cmp	r3, #100	; 0x64
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0fd      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	4b81      	ldr	r3, [pc, #516]	; (8002164 <HAL_RCC_OscConfig+0x4f8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d106      	bne.n	8001f7e <HAL_RCC_OscConfig+0x312>
 8001f70:	4b7b      	ldr	r3, [pc, #492]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4a7a      	ldr	r2, [pc, #488]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6213      	str	r3, [r2, #32]
 8001f7c:	e02d      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x334>
 8001f86:	4b76      	ldr	r3, [pc, #472]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	4a75      	ldr	r2, [pc, #468]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6213      	str	r3, [r2, #32]
 8001f92:	4b73      	ldr	r3, [pc, #460]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4a72      	ldr	r2, [pc, #456]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	6213      	str	r3, [r2, #32]
 8001f9e:	e01c      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b05      	cmp	r3, #5
 8001fa6:	d10c      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x356>
 8001fa8:	4b6d      	ldr	r3, [pc, #436]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a6c      	ldr	r2, [pc, #432]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6213      	str	r3, [r2, #32]
 8001fb4:	4b6a      	ldr	r3, [pc, #424]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a69      	ldr	r2, [pc, #420]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	e00b      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001fc2:	4b67      	ldr	r3, [pc, #412]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a66      	ldr	r2, [pc, #408]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6213      	str	r3, [r2, #32]
 8001fce:	4b64      	ldr	r3, [pc, #400]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a63      	ldr	r2, [pc, #396]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d015      	beq.n	800200e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fb69 	bl	80016b8 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff fb65 	bl	80016b8 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0ab      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	4b57      	ldr	r3, [pc, #348]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ee      	beq.n	8001fea <HAL_RCC_OscConfig+0x37e>
 800200c:	e014      	b.n	8002038 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200e:	f7ff fb53 	bl	80016b8 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7ff fb4f 	bl	80016b8 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e095      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202c:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1ee      	bne.n	8002016 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002038:	7dfb      	ldrb	r3, [r7, #23]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d105      	bne.n	800204a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4b48      	ldr	r3, [pc, #288]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a47      	ldr	r2, [pc, #284]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002048:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8081 	beq.w	8002156 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002054:	4b42      	ldr	r3, [pc, #264]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d061      	beq.n	8002124 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d146      	bne.n	80020f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002068:	4b3f      	ldr	r3, [pc, #252]	; (8002168 <HAL_RCC_OscConfig+0x4fc>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7ff fb23 	bl	80016b8 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002076:	f7ff fb1f 	bl	80016b8 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e067      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002088:	4b35      	ldr	r3, [pc, #212]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f0      	bne.n	8002076 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d108      	bne.n	80020b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800209e:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	492d      	ldr	r1, [pc, #180]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b0:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a19      	ldr	r1, [r3, #32]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	430b      	orrs	r3, r1
 80020c2:	4927      	ldr	r1, [pc, #156]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c8:	4b27      	ldr	r3, [pc, #156]	; (8002168 <HAL_RCC_OscConfig+0x4fc>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7ff faf3 	bl	80016b8 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d6:	f7ff faef 	bl	80016b8 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e037      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x46a>
 80020f4:	e02f      	b.n	8002156 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f6:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <HAL_RCC_OscConfig+0x4fc>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff fadc 	bl	80016b8 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7ff fad8 	bl	80016b8 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e020      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x498>
 8002122:	e018      	b.n	8002156 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e013      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	429a      	cmp	r2, r3
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d001      	beq.n	8002156 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	40007000 	.word	0x40007000
 8002168:	42420060 	.word	0x42420060

0800216c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0d0      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b6a      	ldr	r3, [pc, #424]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d910      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b67      	ldr	r3, [pc, #412]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 0207 	bic.w	r2, r3, #7
 8002196:	4965      	ldr	r1, [pc, #404]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a58      	ldr	r2, [pc, #352]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	494d      	ldr	r1, [pc, #308]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d040      	beq.n	800228c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d115      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	4b41      	ldr	r3, [pc, #260]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e073      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e06b      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224a:	4b39      	ldr	r3, [pc, #228]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f023 0203 	bic.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4936      	ldr	r1, [pc, #216]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800225c:	f7ff fa2c 	bl	80016b8 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	e00a      	b.n	800227a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002264:	f7ff fa28 	bl	80016b8 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e053      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 020c 	and.w	r2, r3, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	429a      	cmp	r2, r3
 800228a:	d1eb      	bne.n	8002264 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d210      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 0207 	bic.w	r2, r3, #7
 80022a2:	4922      	ldr	r1, [pc, #136]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4916      	ldr	r1, [pc, #88]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490e      	ldr	r1, [pc, #56]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f821 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490a      	ldr	r1, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_RCC_ClockConfig+0x1cc>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1d0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff f98a 	bl	8001634 <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40022000 	.word	0x40022000
 8002330:	40021000 	.word	0x40021000
 8002334:	08002c8c 	.word	0x08002c8c
 8002338:	20000040 	.word	0x20000040
 800233c:	20000044 	.word	0x20000044

08002340 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800235a:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b04      	cmp	r3, #4
 8002368:	d002      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x30>
 800236a:	2b08      	cmp	r3, #8
 800236c:	d003      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0x36>
 800236e:	e027      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002372:	613b      	str	r3, [r7, #16]
      break;
 8002374:	e027      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	0c9b      	lsrs	r3, r3, #18
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	4a17      	ldr	r2, [pc, #92]	; (80023dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002380:	5cd3      	ldrb	r3, [r2, r3]
 8002382:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d010      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	0c5b      	lsrs	r3, r3, #17
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800239a:	5cd3      	ldrb	r3, [r2, r3]
 800239c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a0d      	ldr	r2, [pc, #52]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80023a2:	fb02 f203 	mul.w	r2, r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	e004      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a0c      	ldr	r2, [pc, #48]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023b4:	fb02 f303 	mul.w	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	613b      	str	r3, [r7, #16]
      break;
 80023be:	e002      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80023c2:	613b      	str	r3, [r7, #16]
      break;
 80023c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c6:	693b      	ldr	r3, [r7, #16]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	007a1200 	.word	0x007a1200
 80023dc:	08002c9c 	.word	0x08002c9c
 80023e0:	08002cac 	.word	0x08002cac
 80023e4:	003d0900 	.word	0x003d0900

080023e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <RCC_Delay+0x34>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <RCC_Delay+0x38>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	0a5b      	lsrs	r3, r3, #9
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002404:	bf00      	nop
  }
  while (Delay --);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1e5a      	subs	r2, r3, #1
 800240a:	60fa      	str	r2, [r7, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f9      	bne.n	8002404 <RCC_Delay+0x1c>
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	20000040 	.word	0x20000040
 8002420:	10624dd3 	.word	0x10624dd3

08002424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e041      	b.n	80024ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff f85a 	bl	8001504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3304      	adds	r3, #4
 8002460:	4619      	mov	r1, r3
 8002462:	4610      	mov	r0, r2
 8002464:	f000 fa6e 	bl	8002944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d001      	beq.n	80024dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e035      	b.n	8002548 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a16      	ldr	r2, [pc, #88]	; (8002554 <HAL_TIM_Base_Start_IT+0x90>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d009      	beq.n	8002512 <HAL_TIM_Base_Start_IT+0x4e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002506:	d004      	beq.n	8002512 <HAL_TIM_Base_Start_IT+0x4e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a12      	ldr	r2, [pc, #72]	; (8002558 <HAL_TIM_Base_Start_IT+0x94>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d111      	bne.n	8002536 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b06      	cmp	r3, #6
 8002522:	d010      	beq.n	8002546 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002534:	e007      	b.n	8002546 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0201 	orr.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40012c00 	.word	0x40012c00
 8002558:	40000400 	.word	0x40000400

0800255c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b02      	cmp	r3, #2
 8002570:	d122      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b02      	cmp	r3, #2
 800257e:	d11b      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0202 	mvn.w	r2, #2
 8002588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f9b4 	bl	800290c <HAL_TIM_IC_CaptureCallback>
 80025a4:	e005      	b.n	80025b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f9a7 	bl	80028fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f9b6 	bl	800291e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d122      	bne.n	800260c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d11b      	bne.n	800260c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0204 	mvn.w	r2, #4
 80025dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f98a 	bl	800290c <HAL_TIM_IC_CaptureCallback>
 80025f8:	e005      	b.n	8002606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f97d 	bl	80028fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f98c 	bl	800291e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b08      	cmp	r3, #8
 8002618:	d122      	bne.n	8002660 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b08      	cmp	r3, #8
 8002626:	d11b      	bne.n	8002660 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0208 	mvn.w	r2, #8
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2204      	movs	r2, #4
 8002636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f960 	bl	800290c <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f953 	bl	80028fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f962 	bl	800291e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b10      	cmp	r3, #16
 800266c:	d122      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b10      	cmp	r3, #16
 800267a:	d11b      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0210 	mvn.w	r2, #16
 8002684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2208      	movs	r2, #8
 800268a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f936 	bl	800290c <HAL_TIM_IC_CaptureCallback>
 80026a0:	e005      	b.n	80026ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f929 	bl	80028fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f938 	bl	800291e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d10e      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d107      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0201 	mvn.w	r2, #1
 80026d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe fe6c 	bl	80013b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ea:	2b80      	cmp	r3, #128	; 0x80
 80026ec:	d10e      	bne.n	800270c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f8:	2b80      	cmp	r3, #128	; 0x80
 80026fa:	d107      	bne.n	800270c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fa6b 	bl	8002be2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002716:	2b40      	cmp	r3, #64	; 0x40
 8002718:	d10e      	bne.n	8002738 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002724:	2b40      	cmp	r3, #64	; 0x40
 8002726:	d107      	bne.n	8002738 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f8fc 	bl	8002930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b20      	cmp	r3, #32
 8002744:	d10e      	bne.n	8002764 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b20      	cmp	r3, #32
 8002752:	d107      	bne.n	8002764 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0220 	mvn.w	r2, #32
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fa36 	bl	8002bd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_TIM_ConfigClockSource+0x1c>
 8002784:	2302      	movs	r3, #2
 8002786:	e0b4      	b.n	80028f2 <HAL_TIM_ConfigClockSource+0x186>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027c0:	d03e      	beq.n	8002840 <HAL_TIM_ConfigClockSource+0xd4>
 80027c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027c6:	f200 8087 	bhi.w	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ce:	f000 8086 	beq.w	80028de <HAL_TIM_ConfigClockSource+0x172>
 80027d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d6:	d87f      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027d8:	2b70      	cmp	r3, #112	; 0x70
 80027da:	d01a      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0xa6>
 80027dc:	2b70      	cmp	r3, #112	; 0x70
 80027de:	d87b      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027e0:	2b60      	cmp	r3, #96	; 0x60
 80027e2:	d050      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x11a>
 80027e4:	2b60      	cmp	r3, #96	; 0x60
 80027e6:	d877      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027e8:	2b50      	cmp	r3, #80	; 0x50
 80027ea:	d03c      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0xfa>
 80027ec:	2b50      	cmp	r3, #80	; 0x50
 80027ee:	d873      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027f0:	2b40      	cmp	r3, #64	; 0x40
 80027f2:	d058      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0x13a>
 80027f4:	2b40      	cmp	r3, #64	; 0x40
 80027f6:	d86f      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027f8:	2b30      	cmp	r3, #48	; 0x30
 80027fa:	d064      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15a>
 80027fc:	2b30      	cmp	r3, #48	; 0x30
 80027fe:	d86b      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002800:	2b20      	cmp	r3, #32
 8002802:	d060      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002804:	2b20      	cmp	r3, #32
 8002806:	d867      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002808:	2b00      	cmp	r3, #0
 800280a:	d05c      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15a>
 800280c:	2b10      	cmp	r3, #16
 800280e:	d05a      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002810:	e062      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6899      	ldr	r1, [r3, #8]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f000 f95e 	bl	8002ae2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	609a      	str	r2, [r3, #8]
      break;
 800283e:	e04f      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6899      	ldr	r1, [r3, #8]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f000 f947 	bl	8002ae2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002862:	609a      	str	r2, [r3, #8]
      break;
 8002864:	e03c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6859      	ldr	r1, [r3, #4]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	461a      	mov	r2, r3
 8002874:	f000 f8be 	bl	80029f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2150      	movs	r1, #80	; 0x50
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f915 	bl	8002aae <TIM_ITRx_SetConfig>
      break;
 8002884:	e02c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6859      	ldr	r1, [r3, #4]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	461a      	mov	r2, r3
 8002894:	f000 f8dc 	bl	8002a50 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2160      	movs	r1, #96	; 0x60
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f905 	bl	8002aae <TIM_ITRx_SetConfig>
      break;
 80028a4:	e01c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6859      	ldr	r1, [r3, #4]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	461a      	mov	r2, r3
 80028b4:	f000 f89e 	bl	80029f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2140      	movs	r1, #64	; 0x40
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f8f5 	bl	8002aae <TIM_ITRx_SetConfig>
      break;
 80028c4:	e00c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	4610      	mov	r0, r2
 80028d2:	f000 f8ec 	bl	8002aae <TIM_ITRx_SetConfig>
      break;
 80028d6:	e003      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      break;
 80028dc:	e000      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
	...

08002944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a25      	ldr	r2, [pc, #148]	; (80029ec <TIM_Base_SetConfig+0xa8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d007      	beq.n	800296c <TIM_Base_SetConfig+0x28>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002962:	d003      	beq.n	800296c <TIM_Base_SetConfig+0x28>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <TIM_Base_SetConfig+0xac>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d108      	bne.n	800297e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a1a      	ldr	r2, [pc, #104]	; (80029ec <TIM_Base_SetConfig+0xa8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d007      	beq.n	8002996 <TIM_Base_SetConfig+0x52>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298c:	d003      	beq.n	8002996 <TIM_Base_SetConfig+0x52>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a17      	ldr	r2, [pc, #92]	; (80029f0 <TIM_Base_SetConfig+0xac>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d108      	bne.n	80029a8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a07      	ldr	r2, [pc, #28]	; (80029ec <TIM_Base_SetConfig+0xa8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d103      	bne.n	80029dc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	615a      	str	r2, [r3, #20]
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	40012c00 	.word	0x40012c00
 80029f0:	40000400 	.word	0x40000400

080029f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	f023 0201 	bic.w	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f023 030a 	bic.w	r3, r3, #10
 8002a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	621a      	str	r2, [r3, #32]
}
 8002a46:	bf00      	nop
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f023 0210 	bic.w	r2, r3, #16
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	031b      	lsls	r3, r3, #12
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	621a      	str	r2, [r3, #32]
}
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b085      	sub	sp, #20
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f043 0307 	orr.w	r3, r3, #7
 8002ad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	609a      	str	r2, [r3, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b087      	sub	sp, #28
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002afc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	021a      	lsls	r2, r3, #8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	609a      	str	r2, [r3, #8]
}
 8002b16:	bf00      	nop
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e041      	b.n	8002bbc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a14      	ldr	r2, [pc, #80]	; (8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d009      	beq.n	8002b90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b84:	d004      	beq.n	8002b90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a10      	ldr	r2, [pc, #64]	; (8002bcc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d10c      	bne.n	8002baa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40012c00 	.word	0x40012c00
 8002bcc:	40000400 	.word	0x40000400

08002bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <__libc_init_array>:
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	4d0c      	ldr	r5, [pc, #48]	; (8002c2c <__libc_init_array+0x38>)
 8002bfa:	4c0d      	ldr	r4, [pc, #52]	; (8002c30 <__libc_init_array+0x3c>)
 8002bfc:	1b64      	subs	r4, r4, r5
 8002bfe:	10a4      	asrs	r4, r4, #2
 8002c00:	42a6      	cmp	r6, r4
 8002c02:	d109      	bne.n	8002c18 <__libc_init_array+0x24>
 8002c04:	f000 f822 	bl	8002c4c <_init>
 8002c08:	2600      	movs	r6, #0
 8002c0a:	4d0a      	ldr	r5, [pc, #40]	; (8002c34 <__libc_init_array+0x40>)
 8002c0c:	4c0a      	ldr	r4, [pc, #40]	; (8002c38 <__libc_init_array+0x44>)
 8002c0e:	1b64      	subs	r4, r4, r5
 8002c10:	10a4      	asrs	r4, r4, #2
 8002c12:	42a6      	cmp	r6, r4
 8002c14:	d105      	bne.n	8002c22 <__libc_init_array+0x2e>
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
 8002c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c1c:	4798      	blx	r3
 8002c1e:	3601      	adds	r6, #1
 8002c20:	e7ee      	b.n	8002c00 <__libc_init_array+0xc>
 8002c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c26:	4798      	blx	r3
 8002c28:	3601      	adds	r6, #1
 8002c2a:	e7f2      	b.n	8002c12 <__libc_init_array+0x1e>
 8002c2c:	08002cb0 	.word	0x08002cb0
 8002c30:	08002cb0 	.word	0x08002cb0
 8002c34:	08002cb0 	.word	0x08002cb0
 8002c38:	08002cb4 	.word	0x08002cb4

08002c3c <memset>:
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4402      	add	r2, r0
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d100      	bne.n	8002c46 <memset+0xa>
 8002c44:	4770      	bx	lr
 8002c46:	f803 1b01 	strb.w	r1, [r3], #1
 8002c4a:	e7f9      	b.n	8002c40 <memset+0x4>

08002c4c <_init>:
 8002c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4e:	bf00      	nop
 8002c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c52:	bc08      	pop	{r3}
 8002c54:	469e      	mov	lr, r3
 8002c56:	4770      	bx	lr

08002c58 <_fini>:
 8002c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5a:	bf00      	nop
 8002c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5e:	bc08      	pop	{r3}
 8002c60:	469e      	mov	lr, r3
 8002c62:	4770      	bx	lr
